[{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"Hugo로 멋진 블로그나 웹사이트를 만들고, Git으로 소스 코드를 관리하는 것은 이제 많은 분들에게 익숙한 과정입니다. 하지만 git add .과 git commit을 실행하기 전에, 우리는 한 가지 중요한 질문을 스스로에게 던져봐야 합니다. \u0026ldquo;어떤 파일을 Git으로 관리하고, 어떤 파일은 무시해야 할까?\u0026rdquo;\n이 질문에 대한 해답을 주는 것이 바로 .gitignore 파일입니다. 잘 구성된 .gitignore 파일은 깨끗하고 효율적인 저장소 관리의 첫걸음이자, 개발자의 전문성을 보여주는 작지만 중요한 지표입니다.\n오늘은 어떤 Hugo 프로젝트에도 바로 적용할 수 있는 표준 .gitignore 템플릿을 제공하고, 각 항목을 왜 추가해야 하는지 그 이유까지 명확하게 설명해 드리겠습니다.\n왜 .gitignore 설정이 중요한가요? # Git 관리의 핵심 원칙은 \u0026ldquo;소스 코드는 추적하고, 자동으로 생성되는 파일이나 민감한 정보는 제외한다\u0026rdquo; 는 것입니다. 만약 이 원칙을 지키지 않으면 다음과 같은 문제들이 발생할 수 있습니다.\n저장소 용량 낭비 및 속도 저하: hugo 명령어를 실행하면 public 폴더에 수많은 HTML, CSS 파일들이 생성됩니다. 이 파일들을 모두 Git으로 관리하면 저장소 용량이 불필요하게 커지고, clone 이나 push/pull 속도가 느려집니다. 의미 없는 충돌(Conflict) 발생: 협업 시 각자 생성한 public 이나 resources 폴더 내용이 달라져 불필요한 병합 충돌이 발생합니다. 이는 해결하는 것 자체가 시간 낭비입니다. 보안 사고 발생: API 키나 비밀번호가 담긴 .env 파일이 실수로 GitHub Public 저장소에 올라가면, 심각한 보안 사고로 이어질 수 있습니다. 이 모든 문제를 예방하는 것이 바로 .gitignore의 역할입니다.\nHugo .gitignore 표준 템플릿 # 아래는 어떤 Hugo 프로젝트에도 적용할 수 있는 표준 템플릿입니다. 이 내용을 프로젝트 최상위 폴더에 있는 .gitignore 파일에 그대로 복사해서 사용하세요.\n코드 스니펫\n# ========================================= # Hugo 생성 파일 (Hugo Generated Files) # ========================================= # \u0026#39;hugo\u0026#39; 빌드 시 생성되는 최종 결과물 폴더. # 소스 코드만 있으면 언제든 재생성 가능하므로 반드시 제외. /public/ # 이미지 처리, 에셋 번들링 등 Hugo Pipes 결과물이 캐시되는 폴더. # 이 역시 소스로부터 재생성되므로 제외. /resources/ # Hugo 빌드 중 생성되는 임시 잠금 파일. .hugo_build.lock # ========================================= # Node.js 의존성 (Node.js Dependencies) # ========================================= # Tailwind CSS 등 Node.js 기반 도구 사용 시 생성되는 패키지 폴더. # \u0026#39;npm install\u0026#39; 명령어로 언제든 복구 가능하므로 제외. /node_modules/ # ========================================= # OS 및 시스템 파일 (OS \u0026amp; System Files) # ========================================= # macOS 시스템 파일 .DS_Store # Windows 시스템 파일 Thumbs.db # ========================================= # IDE 및 에디터 설정 (IDE \u0026amp; Editor Settings) # ========================================= # Visual Studio Code 에디터 설정 폴더 .vscode/ # JetBrains 계열 에디터(GoLand, WebStorm 등) 설정 폴더 .idea/ # ========================================= # 민감한 정보 및 로그 (Sensitive Info \u0026amp; Logs) # ========================================= # API 키, 비밀번호 등 민감한 정보를 담는 환경 변수 파일. # 보안을 위해 절대로 Git에 커밋 금지! .env # 각종 로그 파일 *.log 내 프로젝트에 적용하는 방법 # 적용 방법은 간단합니다. 하지만 이미 관련 파일들을 커밋한 이력이 있다면, 추가적인 명령어가 필요합니다.\n.gitignore 파일 생성 및 내용 붙여넣기 # 프로젝트 최상위 폴더에 .gitignore 파일이 없다면 생성하고, 위 템플릿 내용을 모두 복사하여 붙여넣습니다.\n이미 커밋된 파일들을 Git 추적에서 제외하기 # 만약 위 템플릿에 있는 파일이나 폴더(예: public, resources)를 이미 커밋한 적이 있다면, .gitignore에 추가해도 Git은 계속해서 해당 파일들을 추적합니다. 따라서 아래 명령어를 통해 Git의 추적 목록에서 명시적으로 제거해주어야 합니다.\n# Git의 추적 목록(Staging Area)에서만 제거합니다. # --cached 옵션 덕분에 내 컴퓨터에 있는 실제 폴더와 파일은 삭제되지 않습니다. git rm -r --cached public/ git rm -r --cached resources/ # 만약 다른 파일들도 이미 커밋했다면 같은 방식으로 추가합니다. # 예: git rm -r --cached .vscode/ # 이제 .gitignore 파일과 추적 제외 상태를 함께 커밋합니다. git add .gitignore git commit -m \u0026#34;Feat: Setup .gitignore and untrack generated files\u0026#34; git push 이 과정을 거치면 앞으로 해당 파일들은 git status에 나타나지 않으며, 여러분은 오직 중요한 소스 코드 변경에만 집중할 수 있게 됩니다.\n마무리하며 # .gitignore를 올바르게 설정하는 것은 단순히 몇 줄의 텍스트를 추가하는 행위가 아닙니다. 내 프로젝트의 무엇이 \u0026lsquo;소스\u0026rsquo;이고 무엇이 \u0026lsquo;결과물\u0026rsquo;인지를 명확히 정의하는 설계 과정의 일부이며, 깨끗하고 안전한 버전 관리를 위한 가장 기본적이고 중요한 습관입니다.\n지금 바로 여러분의 Hugo 프로젝트에 이 표준 .gitignore 템플릿을 적용하여, 보다 전문적인 개발 환경을 구축해 보세요.\n","date":"27 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/set-gitignore-for-hugo/","section":"Posts","summary":"","title":"Hugo 프로젝트를 위한 완벽한 .gitignore 설정 가이드","type":"posts"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/categories/%ED%98%B8%EC%8A%A4%ED%8C%85/","section":"Categories","summary":"","title":"호스팅","type":"categories"},{"content":"오늘은 세련된 디자인과 강력한 커스터마이징 기능으로 많은 주목을 받고 있는 Blowfish 테마를 기존에 운영하던 Hugo 블로그에 적용하는 방법을 상세하게 안내해 드리겠습니다.\n이 글에서는 Blowfish 공식 문서가 권장하는 방식인 Git Submodule**을 사용하여, 가장 안정적이고 확실하게 테마를 설치하고 기본 설정을 완료하는 전 과정을 다룹니다. 차근차근 따라오시면 누구나 멋진 블로그를 완성할 수 있습니다.\n기존 테마 깔끔하게 제거하기 # 새로운 옷을 입기 전, 기존 옷을 먼저 정리해야겠죠. 현재 사용 중인 테마를 깔끔하게 제거하는 것부터 시작하겠습니다. 테마 설치 방식에 따라 아래 방법 중 하나를 선택하세요.\nGit 서브모듈로 설치된 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. git submodule deinit -f themes/old-theme git rm -f themes/old-theme rm -rf .git/modules/themes/old-theme 단순히 폴더만 삭제하는 것을 넘어, Git의 추적 기록까지 완전히 정리해 주는 가장 깔끔한 방법입니다.\n직접 다운로드하여 설치한 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. rm -rf themes/old-theme 또는 파일 탐색기에서 직접 themes/old-theme 폴더를 삭제해도 됩니다.\nGit Submodule로 Blowfish 테마 설치 # 이제 Blowfish 테마를 내 프로젝트에 추가할 차례입니다. 프로젝트의 최상위 폴더(루트)에서 아래 명령어를 순서대로 실행합니다.\ncd my-blog git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish 테마 설정 파일 구성하기 # Blowfish는 매우 상세한 설정 옵션을 제공합니다. 가장 쉽고 확실한 방법은 테마가 제공하는 기본 설정 파일들을 내 프로젝트로 복사한 뒤, 필요한 부분만 수정하는 것입니다.\n최상위 폴더(루트)에서의 hugo.toml는 더이상 사용하지 않으므로 삭제합니다.\nrm hugo.toml 아래 명령어를 실행하면, 프로젝트 루트에 config 폴더가 생성되고 그 안에 _default 폴더와 함께 hugo.toml, params.toml 등의 기본 설정 파일들이 복사됩니다.\ncp -r themes/blowfish/config . 이제 복사된 설정 파일을 Hugo가 인식하도록 config/_default/hugo.toml 파일을 열어, **파일 최상단에 아래 내용을 수정합니다.\n# config/_default/hugo.toml theme = \u0026#34;blowfish\u0026#34; # baseURL과 languageCode는 자신의 환경에 맞게 수정합니다. baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;ko\u0026#34; # 한국어 사용 시 ko로 변경 메뉴 활성화 및 홈페이지 설정 # 기본 설정 파일들은 대부분의 기능이 비활성화(주석 처리)되어 있습니다. 가장 기본적인 메뉴와 홈페이지 설정을 활성화해 보겠습니다.\n메뉴 설정 (menus.en.toml) # menus.en.toml 파일을 열어, 아래와 같이 Blog, Categories, Tags 메뉴 항목의 주석(#)을 제거하여 활성화합니다.\n# config/_default/menus.ko.toml # ... (상단 설명 생략) ... [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 # ... (중간 생략) ... [[main]] name = \u0026#34;Categories\u0026#34; pageRef = \u0026#34;categories\u0026#34; weight = 20 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 # ... (하단 푸터 메뉴 생략) ... 홈페이지 설정 (params.toml) # 홈페이지에 최신 글 목록이 나타나도록 config/_default/params.toml 파일을 수정합니다.\n... [homepage] layout = \u0026#34;page\u0026#34; # valid options: page, profile, hero, card, background, custom #homepageImage = \u0026#34;IMAGE.jpg\u0026#34; # used in: hero, and card showRecent = true showRecentItems = 6 showMoreLink = true showMoreLinkDest = \u0026#34;/posts/\u0026#34; cardView = true cardViewScreenWidth = false layoutBackgroundBlur = false # only used when layout equals background disableHeroImageFilter = false # only used when layout equals hero ... 로컬 확인 및 최종 배포 # 모든 준비가 끝났습니다. 로컬 서버를 실행하여 디자인이 의도대로 적용되었는지 최종 확인합니다.\n# -D 옵션은 draft(초안) 상태의 글도 함께 보여줍니다. hugo server -D 브라우저에서 http://localhost:1313 으로 접속하여 새로운 블로그의 모습을 확인하세요. 메인 페이지, 글 목록, 검색 기능이 모두 잘 작동한다면 성공입니다.\n마지막으로, 변경된 내용을 서버에 배포합니다.\n# 모든 변경사항 추가 git add . # 테마 변경을 알리는 커밋 메시지 작성 git commit -m \u0026#34;Feat: Apply Blowfish theme\u0026#34; # 원격 저장소에 푸시하여 배포 완료 git push 마무리하며 # 지금까지 기존 Hugo 블로그에 Blowfish 테마를 적용하고 기본적인 설정을 마치는 전 과정을 함께했습니다. Blowfish는 params.toml 파일에 수많은 커스터마이징 옵션을 제공하므로, 시간을 갖고 천천히 살펴보시면 라이트/다크 모드, 폰트, 아이콘 등 블로그의 거의 모든 요소를 원하는 대로 바꿀 수 있습니다.\n이 가이드를 시작으로 여러분만의 개성이 가득한 멋진 블로그를 완성하시길 바랍니다.\n","date":"27 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/chage-theme-to-blowfish/","section":"Posts","summary":"","title":"Hugo 블로그에 Blowfish 테마 적용하기","type":"posts"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/android/","section":"Tags","summary":"","title":"Android","type":"tags"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/categories/develop/","section":"Categories","summary":"","title":"Develop","type":"categories"},{"content":" # 안드로이드 앱 개발 시 메모리 누수는 앱의 성능을 저하시키고, 심할 경우 ANR(Application Not Responding)이나 OOM(Out of Memory) 오류를 발생시키는 주범입니다. 이번 글에서는 강력한 메모리 분석 도구인 Memory Analyzer(MAT) 를 사용하여 안드로이드 앱의 Java Heap Dump 파일을 분석하고 메모리 누수를 찾아내는 과정을 상세히 안내하겠습니다.\nHeap Dump 파일 생성하기 # 가장 먼저 분석할 메모리 스냅샷, 즉 Heap Dump 파일이 필요합니다. 안드로이드 스튜디오에서 간단하게 생성할 수 있습니다.\nAndroid Studio Profiler 실행:\n앱을 디버그 모드로 실행합니다. 하단의 Profiler 탭을 엽니다. Memory 프로파일러를 선택합니다. Heap Dump 생성:\n메모리 사용량을 모니터링하다가 분석하고 싶은 시점에 \u0026lsquo;Dump Java heap\u0026rsquo; 버튼 (아래 이미지의 아이콘)을 클릭합니다. 덤프가 완료되면 Android Studio가 자동으로 .hprof 파일을 생성하고 목록에 표시해 줍니다. 이제 분석의 재료가 되는 .hprof 파일이 준비되었습니다.\nhprof 파일 변환하기 (가장 중요!) # 안드로이드 스튜디오에서 생성된 .hprof 파일은 안드로이드 환경에 최적화된 형식입니다. 이 파일을 MAT에서 바로 열면 오류가 발생합니다. 따라서 MAT가 인식할 수 있는 표준 Java hprof 형식으로 변환해야 합니다.\n이때 hprof-conv라는 변환 도구를 사용합니다.\nhprof-conv 위치:\nAndroid SDK 설치 경로 내의 platform-tools 폴더에 있습니다. 예: C:\\Users\\[사용자명]\\AppData\\Local\\Android\\Sdk\\platform-tools 변환 명령어: 터미널이나 명령 프롬프트를 열고 아래 명령어를 실행합니다.\nhprof-conv [입력 파일 경로] [출력 파일 경로] 실행 예시: 원본 파일을 옮겼다고 가정해 보겠습니다.\ncd C:\\Users\\[사용자명]\\AppData\\Local\\Android\\Sdk\\platform-tools ./hprof-conv.exe C:\\Users\\[사용자명]\\Desktop\\original.hprof C:\\Users\\[사용자명]\\Desktop\\converted.hprof 이제 converted.hprof 라는 새로운 파일이 생성되었습니다. 이 파일을 MAT에서 사용하게 됩니다. 이 변환 과정을 잊으면 분석을 시작할 수 없으니 꼭 기억하시기 바랍니다.\nMemory Analyzer (MAT) 설치 및 실행 # MAT는 이클립스 재단에서 제공하는 무료 오픈소스 도구입니다.\n설치:\nEclipse MAT 공식 다운로드 페이지 에 접속하여 본인의 운영체제에 맞는 버전을 다운로드합니다. 압축을 풀기만 하면 바로 실행할 수 있는 독립 실행형(Standalone) 버전입니다. 실행:\n압축 해제한 폴더에서 MemoryAnalyzer 또는 mat 실행 파일을 실행합니다. MAT 실행을 위해서는 Java Runtime(JRE)이 설치되어 있어야 합니다. MAT으로 Heap Dump 파일 분석하기 # 이제 모든 준비가 끝났습니다. 변환된 Heap Dump 파일을 MAT으로 분석해 보겠습니다.\n파일 열기 # MAT를 실행하고 File \u0026gt; Open Heap Dump... 메뉴를 통해 아까 변환했던 converted.hprof 파일을 엽니다. 파일 크기에 따라 로딩 시간이 다소 걸릴 수 있습니다. Leak Suspects Report (누수 의심 보고서) # 파일을 열면 가장 먼저 아래와 같은 팝업창이 나타납니다. **\u0026lsquo;Leak Suspects Report\u0026rsquo;**를 선택하고 Finish를 누르는 것을 강력히 권장합니다. MAT가 자동으로 메모리 누수가 의심되는 지점을 분석하여 리포트 형태로 보여주기 때문입니다. 리포트가 생성되면 파이 차트와 함께 메모리 누수의 원인으로 의심되는 객체(Problem Suspect)가 표시됩니다. 보통 이 리포트만 잘 확인해도 문제의 절반은 해결됩니다. 주요 분석 기능 # Leak Suspects 보고서로 문제가 해결되지 않았다면, 더 깊게 분석해야 합니다. MAT의 핵심 기능 두 가지만 기억하면 충분합니다.\nHistogram (히스토그램)\n기능: 메모리에 로드된 모든 객체를 클래스별로 목록화하여 보여줍니다. 각 클래스의 인스턴스 수(Objects), 인스턴스 자체가 차지하는 메모리(Shallow Heap), 그리고 해당 인스턴스가 참조하는 다른 모든 객체까지 포함한 메모리(Retained Heap)를 확인할 수 있습니다. 사용법: 상단 툴바에서 히스토그램 아이콘을 클릭합니다. Retained Heap을 기준으로 내림차순 정렬합니다. 가장 위에 있는 항목들이 메모리를 가장 많이 점유하는 객체들입니다. 불필요하게 많은 인스턴스가 존재하거나, 비정상적으로 큰 메모리를 차지하는 클래스가 있는지 확인합니다. Dominator Tree (도미네이터 트리)\n기능: 객체 간의 참조 관계를 트리 구조로 보여주어, 어떤 객체가 다른 객체들의 생명주기를 \u0026lsquo;지배(Dominate)\u0026lsquo;하고 있는지 명확하게 보여줍니다. 즉, 특정 객체 하나를 제거했을 때 연쇄적으로 메모리에서 해제될 수 있는 객체들의 집합을 파악하는 데 가장 유용한 기능입니다. 사용법: 상단 툴바에서 도미네이터 트리 아이콘을 클릭합니다. 마찬가지로 Retained Heap 기준으로 정렬하여 가장 큰 메모리 덩어리를 찾습니다. 트리를 확장하며 어떤 객체(예: Activity, Context)가 예상과 달리 수많은 다른 객체들을 참조하고 있는지 추적합니다. 실용적인 팁: GC Root 경로 추적\n누수가 의심되는 객체를 찾았다면, 왜 이 객체가 가비지 컬렉터(GC)에 의해 수거되지 않는지 알아야 합니다.\nHistogram이나 Dominator Tree에서 의심되는 객체를 마우스 오른쪽 버튼으로 클릭합니다. Path to GC Roots \u0026gt; exclude all phantom/weak/soft etc. references를 선택합니다. 이 객체를 메모리에서 계속 붙잡고 있는 참조 경로(Chain of References)가 나타납니다. 보통 static 필드나 백그라운드 스레드, 혹은 잘못 관리된 리스너 등이 원인인 경우가 많습니다. 이 경로를 따라가면 누수의 근본 원인을 찾을 수 있습니다. 마무리하며 # 메모리 누수는 잡기 어려운 버그일 수 있지만, MAT과 같은 강력한 도구를 활용하면 체계적으로 접근하여 해결할 수 있습니다.\n핵심 요약:\nHeap Dump 생성: 안드로이드 스튜디오 프로파일러 사용 hprof 변환: hprof-conv 도구로 표준 형식으로 변환 (필수!) MAT 분석: Leak Suspects로 자동 분석 후, Dominator Tree와 Histogram으로 상세 분석 이 가이드가 안드로이드 앱의 성능과 안정성을 높이는 데 실질적인 도움이 되기를 바랍니다. 꾸준한 메모리 관리는 고품질 앱의 기본입니다.\n","date":"27 June 2025","externalUrl":null,"permalink":"/posts/develop/android/debug-analyze-java-heap-dump-using-mat/","section":"Posts","summary":"","title":"Memory Analyzer(MAT)으로 Android 앱의 Java Heap Dump 완벽 분석 가이드","type":"posts"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/termux/","section":"Tags","summary":"","title":"Termux","type":"tags"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/categories/tools/","section":"Categories","summary":"","title":"Tools","type":"categories"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"Vscode","type":"tags"},{"content":"\u0026ldquo;카페에서 태블릿으로 코딩을 할 수 있다면?\u0026rdquo;, \u0026ldquo;여행 중에 급하게 스마트폰으로 코드를 수정해야 한다면?\u0026rdquo; 이런 상상, 한 번쯤 해보셨을 겁니다. 오늘은 그 상상을 현실로 만드는 방법을 소개해 드리고자 합니다.\n바로 안드로이드의 강력한 리눅스 환경인 Termux와 웹 기반 VS Code인 code-server를 조합하여, 언제 어디서든 웹 브라우저만 있으면 접속할 수 있는 나만의 개발 서버를 구축하는 방법입니다.\n이 글은 독자 여러분께서 Termux를 이미 설치하고 기본적인 pkg update \u0026amp;\u0026amp; pkg upgrade 명령어를 통해 시스템을 최신 상태로 유지하고 있다는 가정하에 진행됩니다.\nTermux 설치 부터 필요하신 분은\n안드로이드, 리눅스 머신으로 변신시키기: Termux 설치와 기본 설정 가이드 (2025년 최신판) 19 June 2025\u0026middot;522 words\u0026middot;3 mins 글을 참고해 주세요\n필수 패키지 설치 # code-server 설치 및 원활한 사용을 위해 필요한 기본적인 도구들을 먼저 설치합니다. Termux를 실행하고 아래 명령어를 입력해 주세요.\npkg upgrade pkg install proot-distro -y proot: Termux의 가상 파일 시스템 환경에 도움을 주는 유틸리티입니다. code-server 설치하기 # 이제 본격적으로 code-server를 설치할 차례입니다.\nubuntu 설치하기 # Termux 에서 code-server 직접 실행할 수 없기 때문에, ubuntu 가상 환경을 먼저 구성하겠습니다.\nproot-distro install ubuntu 이제 ubuntu 가상 환경에 로그인 합니다.\nproot-distro login ubuntu 아래와 같이 root@ubuntu 로 ubuntu에 로그인 되었음을 확인할 수 있습니다. code-server 설치하기 # 안드로이드 기기는 대부분 ARM 기반의 aarch64 아키텍처를 사용하는데, 복잡한 설치 과정을 자동화해주는 공식 설치 스크립트가 있어 매우 편리합니다.\n아래 명령어를 Termux에 그대로 입력하고 실행하세요.\napt update apt upgrade apt install wget curl curl -fsSL https://code-server.dev/install.sh | sh 이 스크립트는 현재 사용 중인 기기의 운영체제와 아키텍처를 자동으로 감지하여, 그에 맞는 최신 버전의 code-server를 다운로드하고 실행 가능한 상태로 설치해 줍니다.\n![[install-code-server-on-ubuntu.webp]]\ncode-server 실행 및 접속 # 설치가 완료되었다면, 이제 서버를 실행하고 접속해 보겠습니다.\n최초 실행 및 비밀번호 확인 # 아래 명령어로 code-server를 실행합니다.\ncode-server 서버가 시작되면 터미널에 몇 가지 정보가 나타납니다. 여기서 우리가 주목해야 할 것은 두 가지입니다.\n접속 주소: HTTP server listening on http://127.0.0.1:8080 (내부 접속 주소) 비밀번호 위치: Password is in ~/.config/code-server/config.yaml 이제 아래 명령어로 설정 파일의 내용을 확인하여 자동으로 생성된 비밀번호를 확인합니다.\ncat ~/.config/code-server/config.yaml 출력된 내용 중 password: 항목에 있는 긴 문자열이 여러분의 초기 비밀번호입니다.\nbind-addr: 127.0.0.1:8080 auth: password password: \u0026lt;\u0026lt;password\u0026gt;\u0026gt; #need to be changed cert: false 보안 팁: password: 항목을 원하는 비밀번호로 수정하고 서버를 재시작하세요.\n웹 브라우저로 접속 # 안드로이드 기기에서 Chrome과 같은 웹 브라우저를 열고, 주소창에 http://127.0.0.1:8080 또는 localhost:8080 을 입력하세요.\n![[vs-code-login.webp]]\nVS Code 로그인 화면이 나타나면, 방금 확인한 비밀번호를 입력합니다.\n![[vs-code-run.webp]]\n성공입니다! 이제 여러분의 안드로이드 기기 안에서 완벽하게 동작하는 VS Code가 생겼습니다.\n4단계 (심화): 외부 기기에서 접속하기 # 이 설정의 진정한 묘미는 PC나 노트북 등 다른 기기에서 접속하여 코딩하는 것입니다.\n서버 실행 옵션 변경: code-server를 종료(Ctrl + C)하고, 외부 접속을 허용하는 옵션을 추가하여 다시 실행합니다.\ncode-server --bind-addr 0.0.0.0:8080 0.0.0.0은 모든 네트워크 인터페이스로부터의 접속을 허용하겠다는 의미입니다.\n안드로이드 기기 IP 주소 확인: Termux에 ifconfig 또는 ip addr 명령어를 입력하거나, 안드로이드의 \u0026lsquo;설정 \u0026gt; Wi-Fi\u0026rsquo; 메뉴에서 현재 연결된 Wi-Fi의 상세 정보로 들어가 IP 주소를 확인합니다. (예: 192.168.1.10)\n외부 기기에서 접속: 이제 노트북이나 PC의 웹 브라우저 주소창에 http://\u0026lt;여러분의-안드로이드-IP\u0026gt;:8080 (예: http://192.168.1.10:8080)을 입력하여 접속합니다. 동일하게 비밀번호를 입력하면 바로 코딩을 시작할 수 있습니다.\n보안 팁: 외부 접속을 허용할 경우, 추측하기 어려운 비밀번호로 변경하는 것이 좋습니다. ~/.config/code-server/config.yaml 파일을 직접 열어 password: 항목을 원하는 비밀번호로 수정하고 서버를 재시작하세요.\n마무리 및 활용 팁 # 이제 여러분의 안드로이드 기기는 저전력으로 24시간 구동 가능한 개인 개발 서버가 되었습니다.\n백그라운드 실행 유지: termux-wake-lock 명령어를 실행해두면 화면이 꺼져도 Termux 세션이 종료되는 것을 방지할 수 있습니다.\nVS Code 확장 프로그램: 일반 VS Code와 마찬가지로 확장 프로그램(Extensions) 탭에서 원하는 플러그인을 검색하고 설치하여 사용할 수 있습니다.\n파일 접근: termux-setup-storage 명령어로 저장 공간 접근 권한을 허용한 뒤, ~/storage 폴더를 통해 스마트폰의 내부 저장소에 접근하여 파일을 수정할 수 있습니다.\n이 강력한 휴대용 개발 환경을 통해 여러분의 생산성을 한 단계 끌어올려 보시길 바랍니다.\n","date":"27 June 2025","externalUrl":null,"permalink":"/posts/apps/termux/termux-with-code-server/","section":"Posts","summary":"","title":"안드로이드 폰을 코딩 머신으로! Termux와 code-server로 VS Code 환경 구축하기","type":"posts"},{"content":"","date":"27 June 2025","externalUrl":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian","type":"tags"},{"content":" # Obsidian(옵시디언)으로 노트를 작성하다 보면 이미지를 첨부할 일이 많습니다. 그런데 이미지를 붙여넣을 때마다 파일이 보관소(Vault) 최상위 폴더에 저장되어 파일 관리가 번거로워지는 경험, 다들 한 번쯤 있으실 겁니다. 노트 파일과 이미지 파일이 따로 놀면 나중에 파일을 찾거나 관리하기가 매우 까다롭습니다.\n오늘은 이 문제를 해결하기 위해 이미지를 현재 작성 중인 노트와 동일한 위치에 저장하는 방법을 알아보겠습니다. 설정 하나만 변경하면 되니, 차근차근 따라오시면 됩니다.\n왜 이미지 저장 위치를 변경해야 할까? # Obsidian은 기본적으로 이미지를 보관소(Vault)의 루트 폴더에 저장합니다. 노트('*.md') 파일은 특정 폴더 안에 있는데, 이미지는 밖에 있으니 연관성이 떨어져 보입니다.\n이렇게 되면 다음과 같은 문제점이 발생할 수 있습니다.\n파일 관리의 어려움: 어떤 이미지가 어떤 노트에 속하는지 파악하기 어렵습니다. 링크 깨짐 현상: 나중에 노트 파일을 다른 폴더로 옮길 때 이미지 링크가 깨질 가능성이 높아집니다. 구조의 복잡성: 파일 탐색기(File Explorer) 뷰가 지저분해져 노트 전체의 구조를 파악하기 힘들어집니다. 따라서 노트와 관련 이미지를 같은 폴더에 묶어두는 것은 효율적인 노트 관리를 위한 필수적인 과정입니다.\n이미지 저장 위치 변경 방법 (3단계) # Obsidian 설정에서 \u0026lsquo;첨부 파일(Attachment)\u0026rsquo; 관련 옵션을 변경하면 간단하게 해결할 수 있습니다.\n1. 설정(Settings) 메뉴 열기\nObsidian 좌측 하단에 있는 톱니바퀴 모양의 \u0026rsquo;⛭(설정)\u0026rsquo; 아이콘을 클릭합니다.\n2. \u0026lsquo;파일 및 링크(Files \u0026amp; Links)\u0026rsquo; 탭 이동\n설정 창이 열리면 왼쪽 메뉴에서 \u0026lsquo;파일 및 링크\u0026rsquo; 탭을 선택합니다. 파일 생성 및 링크 처리와 관련된 다양한 옵션을 이곳에서 관리할 수 있습니다.\n3. \u0026lsquo;새 첨부 파일을 만들 위치\u0026rsquo; 설정 변경\n\u0026lsquo;파일 및 링크\u0026rsquo; 설정 항목 중에서 \u0026lsquo;새 첨부 파일을 만들 위치(Default location for new attachments)\u0026rsquo; 라는 옵션을 찾습니다.\n이 옵션의 드롭다운 메뉴를 클릭하면 여러 선택지가 나타납니다. 여기서 \u0026lsquo;현재 파일과 같은 폴더(Same folder as current file)\u0026rsquo; 를 선택합니다.\n설정은 자동으로 저장됩니다. 이제 설정 창을 닫고 노트에 이미지를 붙여넣어 보세요.\nCtrl + V (Windows/Linux) 또는 Cmd + V (macOS)를 사용해 클립보드의 이미지를 붙여넣거나, 이미지를 노트 편집창으로 드래그 앤 드롭하면 해당 노트 파일이 있는 폴더에 이미지 파일('*.png' 또는 '*.jpg')이 함께 생성되는 것을 확인할 수 있습니다.\n추가 팁: 하위 폴더에 정리하기 # 만약 노트와 동일한 위치이지만, 이미지 파일들을 별도의 하위 폴더에 정리하고 싶다면 다음과 같이 설정할 수 있습니다.\n\u0026lsquo;새 첨부 파일을 만들 위치\u0026rsquo; 옵션에서 \u0026lsquo;현재 폴더 아래의 하위 폴더에(In subfolder under current folder)\u0026rsquo; 를 선택합니다. 바로 아래에 나타나는 \u0026lsquo;하위 폴더 이름(Subfolder name)\u0026rsquo; 입력란에 원하는 폴더 이름(예: images, assets)을 입력합니다. 이렇게 설정하면 이미지를 붙여넣을 때마다 현재 노트가 위치한 폴더 안에 지정한 이름의 하위 폴더가 자동으로 생성되고, 그 안에 이미지 파일이 저장됩니다. 이는 노트 하나에 많은 이미지가 첨부될 때 파일을 깔끔하게 관리하는 데 매우 유용합니다.\n마치며 # 오늘은 Obsidian에서 이미지 파일을 현재 노트와 동일한 위치에 저장하는 방법을 알아보았습니다. 아주 간단한 설정 변경만으로도 노트 관리의 효율성을 크게 높일 수 있습니다.\nIT 개발자에게 있어 체계적인 문서와 파일 관리는 필수적인 역량입니다. Obsidian을 사용하시는 모든 분이 오늘 알려드린 방법을 통해 조금 더 구조화된 방식으로 노트를 관리하고, 지식 자산을 효과적으로 쌓아나가시길 바랍니다.\n궁금한 점이 있다면 언제든지 댓글로 남겨주세요.\n참조:\nObsidian 공식 도움말 - Attachments: https://help.obsidian.md/Files+and+links/Attachments ","date":"27 June 2025","externalUrl":null,"permalink":"/posts/apps/obsidian/saving-contents-to-specific-folder/","section":"Posts","summary":"","title":"Obsidian 이미지, 글과 함께 저장하는 가장 간단한 방법","type":"posts"},{"content":"오늘은 제가 유용하게 사용하고 있는 노트 앱, Obsidian에서 이미지 파일을 효율적으로 관리하는 방법을 공유하고자 합니다. 바로 이미지를 WebP 포맷으로 변환하여 사용하는 것입니다.\nObsidian에 이미지를 많이 첨부하다 보면 보관소(Vault)의 용량이 커지고, 동기화나 백업 시 부담이 될 수 있습니다. 특히 고화질의 스크린샷이나 PNG 파일을 그대로 사용하면 파일 하나당 수 메가바이트(MB)에 달하기도 합니다.\n이 문제를 해결하기 위해 저는 이미지 파일을 WebP 포맷으로 변환하는 방법을 사용하고 있으며, 이를 자동화해주는 Obsidian 커뮤니티 플러그인을 중심으로 실질적인 노하우를 알려드리겠습니다.\n왜 WebP를 사용해야 할까요? # WebP는 구글(Google)이 웹 환경의 이미지 최적화를 위해 개발한 이미지 포맷입니다. 기존에 널리 사용되던 JPG나 PNG에 비해 여러 장점을 가집니다.\n더 작은 파일 크기: WebP는 손실/비손실 압축 기술을 모두 지원하며, 동일한 이미지 품질을 유지하면서도 파일 크기를 현저히 줄일 수 있습니다. 일반적으로 JPG보다 약 25~35%, PNG보다는 약 26% 더 작습니다. 품질 유지: 파일 크기를 줄이면서도 시각적으로 인지하기 어려운 수준의 품질 저하만 발생시켜 원본과 거의 유사한 퀄리티를 보장합니다. 다양한 기능 지원: PNG처럼 투명한 배경(알파 채널)을 지원하고, GIF와 같이 움직이는 이미지(애니메이션)도 지원합니다. Obsidian에 적용하면 노트 용량을 획기적으로 줄여 보관소 관리를 용이하게 하고, 동기화 속도 향상 및 저장 공간 확보라는 실질적인 이점을 얻을 수 있습니다.\nObsidian에서 WebP 변환을 자동화하는 방법: \u0026lsquo;Image Converter\u0026rsquo; 플러그인 # Obsidian에서는 커뮤니티 플러그인을 활용하여 이미지 변환 과정을 매우 간단하게 처리할 수 있습니다. 여러 플러그인이 있지만, 가장 기능이 강력하고 설정이 편리한 \u0026lsquo;Image Converter\u0026rsquo; 플러그인을 추천합니다.\nImage Converter 플러그인 설치 # Obsidian 설정(Settings) 메뉴를 엽니다. (단축키: Ctrl/Cmd + ,) 왼쪽 탭에서 Community plugins를 선택합니다. Browse 버튼을 클릭하여 커뮤니티 플러그인 목록을 엽니다. 검색창에 Image Converter를 입력하여 해당 플러그인을 찾고 Install 버튼을 눌러 설치합니다. 설치가 완료되면 Enable 버튼을 눌러 플러그인을 활성화합니다. Image Converter 플러그인 설정 # 플러그인을 활성화했다면, 이제 자신의 작업 스타일에 맞게 설정을 변경할 차례입니다. 설정(Settings) \u0026gt; Community Plugins 탭 아래에 Image Converter 메뉴가 추가된 것을 확인할 수 있습니다.\n저장 폴더, 이미지 리사이징, 정렬 등 다양한 부가 기능이 있으니 필요에 따라 설정을 조정하시면 됩니다.\n사용 예시 및 실질적인 팁 # 설정을 마쳤다면 이제 실제로 사용해볼 차례입니다.\n웹 페이지의 이미지나 스크린샷 캡처 도구로 이미지를 복사합니다. Obsidian 노트 편집기에 그대로 붙여넣기(Ctrl/Cmd + V) 합니다. \u0026lsquo;Image Converter\u0026rsquo; 플러그인이 작동하면서 자동으로 이미지가 WebP 포맷으로 변환되고, 설정한 경로와 파일명 규칙에 따라 저장됩니다. 위 이미지에서 볼 수 있듯, 간단한 붙여넣기 동작만으로 PNG 파일이 훨씬 가벼운 WebP 파일로 변환되어 저장된 것을 확인할 수 있습니다.\n팁: 기존에 Markdown으로 작성된 다른 문서들을 Obsidian으로 가져올 때도 매우 유용합니다. 이미지 파일들을 Obsidian 보관소의 특정 폴더(예: \u0026lsquo;images\u0026rsquo; 폴더)에 옮겨두고, 노트에서 해당 이미지를 참조하도록 링크만 수정하면 됩니다. 이 과정에서 \u0026lsquo;Image Converter\u0026rsquo; 플러그인이 자동으로 WebP로 변환해주지는 않지만, 외부 변환 도구를 사용하여 일괄 변환 후 옮겨두면 보관소 용량을 크게 절약할 수 있습니다.\n마무리하며 # Obsidian은 단순한 노트 앱을 넘어, 지식과 정보를 체계적으로 관리하는 강력한 도구입니다. 여기에 \u0026lsquo;Image Converter\u0026rsquo;와 같은 플러그인을 활용하여 이미지 파일을 WebP로 자동 변환하는 워크플로우를 구축하면, 장기적으로 보관소의 용량을 효율적으로 관리하고 쾌적한 사용 환경을 유지할 수 있습니다.\n개발자로서 다양한 도구를 사용해봤지만, Obsidian만큼 확장성과 자율성을 보장하는 툴은 드뭅니다. 오늘 소개해드린 방법이 여러분의 Obsidian 라이프를 한 단계 더 발전시키는 데 도움이 되기를 바랍니다.\n참조:\nImage Converter Plugin - Obsidian.md WebP - Google Developers ","date":"27 June 2025","externalUrl":null,"permalink":"/posts/apps/obsidian/converting-image-to-webp/","section":"Posts","summary":"","title":"Obsidian 이미지, WebP로 가볍게 관리하는 실용적인 방법","type":"posts"},{"content":"Git을 처음 설치했거나 새로운 환경에서 작업을 시작할 때, 가장 먼저 해야 할 일은 사용자 정보를 설정하는 것입니다. Git은 커밋(Commit)을 할 때마다 이 정보를 사용하여 누가 변경사항을 만들었는지 기록합니다. 이 가이드에서는 Git 사용자 이름과 이메일 주소를 설정하는 방법, 그리고 추가적인 유용한 설정들을 다룹니다.\n사용자 이름과 이메일 설정 # Git에서 커밋 기록에 사용될 이름과 이메일 주소를 설정하는 것은 필수적입니다. --global 옵션을 사용하면 현재 컴퓨터의 모든 Git 저장소에 동일한 설정을 적용할 수 있습니다.\n터미널 또는 Git Bash를 열고 다음 명령어를 입력하세요.\n이름 설정:\ngit config --global user.name \u0026#34;사용자 이름\u0026#34; 예시:\ngit config --global user.name \u0026#34;홍길동\u0026#34; 이메일 주소 설정:\ngit config --global user.email \u0026#34;이메일@주소.com\u0026#34; 예시:\ngit config --global user.email \u0026#34;honggildong@example.com\u0026#34; GitHub 또는 다른 Git 호스팅 서비스에서 사용하는 이메일 주소를 등록하는 것이 일반적입니다.\n설정 확인하기 # 설정이 올바르게 되었는지 확인하려면 다음 명령어를 사용합니다.\n전체 설정 목록 확인:\ngit config --list 특정 설정 확인:\ngit config user.name git config user.email 명령어를 실행했을 때 이전에 입력한 사용자 이름과 이메일 주소가 출력된다면 성공적으로 설정된 것입니다.\nGit 설정의 세 가지 수준 # Git은 세 가지 다른 수준의 설정 파일을 사용합니다. 각 설정은 서로 다른 범위에 적용되며, 충돌 시에는 더 좁은 범위의 설정이 우선적으로 적용됩니다.\nLocal (--local): # 특정 저장소에만 적용되는 설정입니다. 저장소 내의 .git/config 파일에 저장됩니다. --global이나 --system 옵션 없이 git config 명령어를 사용하면 기본적으로 이 수준에 적용됩니다.\n적용 방법: git config user.name \u0026quot;프로젝트용 이름\u0026quot; 우선순위: 1순위 (가장 높음) Global (--global): # 현재 컴퓨터 사용자에게 적용되는 설정입니다. 사용자의 홈 디렉터리(~/.gitconfig)에 저장됩니다. 시스템의 모든 저장소에 공통으로 적용하고 싶을 때 사용합니다.\n적용 방법: git config --global user.name \u0026quot;내 기본 이름\u0026quot; 우선순위: 2순위 System (--system): # 시스템의 모든 사용자와 모든 저장소에 적용되는 설정입니다. Git 설치 경로의 etc/gitconfig 파일에 저장되며, 시스템 관리자 권한이 필요할 수 있습니다. 거의 사용할 일이 없습니다.\n적용 방법: git config --system user.name \u0026quot;시스템 공용 이름\u0026quot; 우선순위: 3순위 (가장 낮음) 예를 들어, --global로 \u0026ldquo;홍길동\u0026quot;을 설정하고 특정 프로젝트 폴더 안에서 --local로 \u0026ldquo;프로젝트A-홍길동\u0026quot;을 설정하면, 해당 프로젝트에서는 \u0026ldquo;프로젝트A-홍길동\u0026quot;이라는 이름으로 커밋이 기록됩니다.\n기본 편집기 설정 # Git이 커밋 메시지 등을 입력받기 위해 실행하는 기본 텍스트 편집기를 설정할 수 있습니다. 기본 편집기는 보통 Vim 또는 Nano로 설정되어 있어 익숙하지 않은 사용자에게는 불편할 수 있습니다. Visual Studio Code, Sublime Text 등 선호하는 편집기로 변경할 수 있습니다.\nVisual Studio Code로 설정:\ngit config --global core.editor \u0026#34;code --wait\u0026#34; Sublime Text로 설정:\ngit config --global core.editor \u0026#34;subl -n -w\u0026#34; Vim으로 설정 (기본값으로 되돌리고 싶을 경우):\ngit config --global core.editor \u0026#34;vim\u0026#34; 이제 git commit과 같이 편집기가 필요한 명령어를 실행하면 설정한 편집기가 열립니다.\n이 가이드를 통해 Git 사용을 위한 기본적인 사용자 설정을 마칠 수 있습니다. 올바른 사용자 정보 설정은 협업과 프로젝트 관리의 첫걸음입니다.\n","date":"27 June 2025","externalUrl":null,"permalink":"/posts/apps/git/user-setting/","section":"Posts","summary":"","title":"Git 사용자 설정하기","type":"posts"},{"content":"수많은 HUGO 테마 중에서도 압도적인 인기를 자랑하는 테마가 있습니다. 바로 PaperMod 입니다. 빠른 속도, 미니멀한 디자인, 강력한 기능(SEO, 다크 모드, 검색 등)을 모두 갖추고 있어 전 세계 수많은 블로거와 개발자들의 사랑을 받고 있습니다.\n오늘은 기존에 운영하던 Hugo 블로그에 바로 이 PaperMod 테마를 적용하는 방법을, 처음부터 끝까지 상세하게 안내해 드리겠습니다.\n기존 테마 깔끔하게 제거하기 # 새로운 옷을 입기 전, 기존 옷을 먼저 정리해야겠죠. 현재 사용 중인 테마를 깔끔하게 제거하는 것부터 시작하겠습니다. 테마 설치 방식에 따라 아래 방법 중 하나를 선택하세요.\nGit 서브모듈로 설치된 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. git submodule deinit -f themes/old-theme git rm -f themes/old-theme rm -rf .git/modules/themes/old-theme 이 명령어들은 단순히 폴더를 지우는 것을 넘어, Git의 추적 기록까지 완전히 정리해 줍니다.\n직접 다운로드하여 설치한 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. rm -rf themes/old-theme 또는 파일 탐색기에서 직접 themes/old-theme 폴더를 삭제해도 됩니다.\nPaperMod 테마 설치하기 # 이제 오늘의 주인공, PaperMod 테마를 설치할 차례입니다. 추후 테마 관리를 위해 Git 서브모듈 방식을 사용하는 것이 가장 좋습니다.\nGit 서브모듈로 추가:\n프로젝트의 최상위 폴더에서 아래 명령어를 입력합니다.\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod themes 폴더 안에 PaperMod라는 이름으로 테마가 설치됩니다.\n팁: PaperMod 테마는 다른 복잡한 테마들과 달리 Hugo Extended 버전이 필요 없습니다. 일반 Hugo 버전으로도 모든 기능을 완벽하게 사용할 수 있어 설치가 더욱 간편합니다.\nhugo.toml 설정하기 # PaperMod의 기능을 활성화하기 위해 블로그의 메인 설정 파일인 config.toml을 수정해야 합니다. 아래는 가장 기본적인 설정 예시입니다. 기존 설정을 참고하여 내용을 수정하거나 추가하세요.\nIni, TOML\nbaseURL = \u0026#34;https://your-blog-url.com/\u0026#34; languageCode = \u0026#34;ko-kr\u0026#34; title = \u0026#34;나의 PaperMod 블로그\u0026#34; theme = \u0026#34;PaperMod\u0026#34; # 테마를 PaperMod로 지정 [params] author = \u0026#34;블로거 이름\u0026#34; description = \u0026#34;PaperMod 테마를 적용한 제 블로그입니다.\u0026#34; defaultTheme = \u0026#34;auto\u0026#34; # \u0026#34;auto\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34; 중 선택 ShowReadingTime = true # 글 읽는 시간 표시 ShowShareButtons = true # 공유 버튼 표시 ShowPostNavLinks = true # 이전/다음 글 링크 표시 # 메인 페이지 설정 [params.homeInfoParams] Title = \u0026#34;안녕하세요! 👋\u0026#34; Content = \u0026#34;이곳은 PaperMod 테마로 만든 블로그입니다. 깔끔하고 빠르죠.\u0026#34; # 소셜 아이콘 설정 (예시) [[params.socialIcons]] name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/your-github-id\u0026#34; [[params.socialIcons]] name = \u0026#34;linkedin\u0026#34; url = \u0026#34;https://www.linkedin.com/in/your-linkedin-id/\u0026#34; # 메인 메뉴 설정 [menu] [[menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;글 목록\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 10 [[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;검색\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 20 [[menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;태그\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 30 PaperMod는 이 외에도 수많은 설정(파라미터)을 제공합니다. 더 상세한 커스터마이징을 원하시면 공식 문서를 꼭 참고하세요.\n참조: PaperMod 테마 공식 위키 - 설정 가이드 로컬 확인 및 최종 배포 # 모든 준비가 끝났습니다. 로컬 서버를 실행하여 디자인이 의도대로 적용되었는지 최종 확인합니다.\n# -D 옵션은 draft(초안) 상태의 글도 함께 보여줍니다. hugo server -D 브라우저에서 http://localhost:1313 으로 접속하여 새로운 블로그의 모습을 확인하세요. 메인 페이지, 글 목록, 검색 기능이 모두 잘 작동한다면 성공입니다.\n마지막으로, 변경된 내용을 서버에 배포합니다.\n# 모든 변경사항 추가 git add . # 테마 변경을 알리는 커밋 메시지 작성 git commit -m \u0026#34;Feat: Apply PaperMod theme\u0026#34; # 원격 저장소에 푸시하여 배포 완료 git push 마무리하며 # PaperMod 테마는 미니멀리즘과 강력한 기능 사이에서 완벽한 균형을 이룬, 그야말로 \u0026lsquo;정석\u0026rsquo;과도 같은 테마입니다. 직접 적용해보시면 왜 이 테마가 그토록 많은 사랑을 받는지 바로 체감하실 수 있을 겁니다.\n이제 여러분의 블로그는 더 빠르고, 더 읽기 편하고, 더 전문적인 모습으로 방문자들을 맞이할 준비를 마쳤습니다.\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/change-theme-to-papermod/","section":"Posts","summary":"","title":"HUGO 블로그 최고 인기 테마, PaperMod 적용 완벽 가이드","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/mac/","section":"Tags","summary":"","title":"Mac","type":"tags"},{"content":"오늘은 빠르고 간결하기로 소문난 정적 사이트 생성기(Static Site Generator, SSG), Hugo를 사용하여 macOS 환경에서 나만의 블로그를 만드는 방법을 알아보겠습니다. 워드프레스와 같은 동적 사이트와 달리, Hugo는 데이터베이스나 복잡한 서버 로직 없이 순수 HTML, CSS, JS 파일로 웹사이트를 생성합니다. 덕분에 비교할 수 없이 빠른 속도, 강력한 보안, 그리고 무료에 가까운 호스팅 비용이라는 엄청난 장점을 가집니다.\n본격적인 시작에 앞서 준비물 확인하기 # 딱 한 가지만 준비하면 됩니다. 바로 Homebrew입니다. Homebrew는 macOS용 패키지 관리자로, 터미널 명령 한 줄로 각종 소프트웨어를 간단하게 설치할 수 있게 해주는 필수 도구입니다. 터미널을 열고 아래 명령어를 입력해 Homebrew가 설치되어 있는지 확인해 보세요.\nbrew --version 만약 버전 정보가 출력된다면 이미 설치된 것입니다. command not found와 같은 메시지가 나온다면, 아래 명령어를 터미널에 붙여넣어 Homebrew를 설치해 주세요.\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Hugo 설치하기 # Homebrew가 준비되었다면 Hugo 설치는 식은 죽 먹기입니다. 터미널에 다음 명령어를 입력하세요.\nbrew install hugo 설치가 완료되면 Homebrew 때와 마찬가지로 버전 확인 명령어로 제대로 설치되었는지 확인합니다.\nhugo version 버전 정보가 보인다면 성공입니다. 이제 블로그를 만들 모든 준비가 끝났습니다.\n내 블로그 사이트 생성하기 # 이제 Hugo를 이용해 블로그의 뼈대를 만들어 보겠습니다. 원하는 경로로 이동한 후, 다음 명령어를 실행하세요. my-blog 부분은 여러분이 원하는 폴더 이름으로 변경해도 좋습니다.\nhugo new site my-blog 명령을 실행하면 my-blog라는 폴더가 생성되고, 그 안에 Hugo 사이트를 구성하는 기본 폴더와 파일들이 자동으로 만들어집니다.\n생성된 my-blog 폴더로 이동해 볼까요?\ncd my-blog ls -l 명령어로 폴더 구조를 살펴보면 다음과 같은 폴더들이 보일 겁니다.\narchetypes: 새 콘텐츠 파일의 기본 양식을 정의합니다. content: 여러분이 작성할 블로그 글(마크다운 파일)이 저장되는 곳입니다. data: 사이트에서 사용할 수 있는 구조화된 데이터 파일(YAML, JSON, TOML)을 저장합니다. layouts: 웹사이트의 HTML 템플릿 파일이 위치합니다. static: 이미지, CSS, JavaScript 파일 등 정적 자원들을 저장합니다. themes: 블로그의 디자인을 담당하는 테마가 설치되는 폴더입니다. hugo.toml: 사이트의 전반적인 설정을 담당하는 가장 중요한 파일입니다. 블로그 디자인(테마) 입히기 # 뼈대만 있는 블로그는 의미가 없겠죠? 이제 디자인을 입힐 차례입니다. Hugo는 전 세계 개발자들이 만들어 공유하는 수많은 무료 테마를 제공합니다.\nHugo 공식 테마 사이트 에서 마음에 드는 테마를 골라보세요.\n이 가이드에서는 입문용으로 가장 많이 사용되는 Ananke 테마를 기준으로 설명하겠습니다.\n먼저, 방금 만든 내 블로그 폴더를 Git 저장소로 초기화해야 합니다. 테마는 보통 Git Submodule이라는 기능으로 관리하는 것이 가장 편리하기 때문입니다.\ngit init 이제 아래 명령어로 Ananke 테마를 themes 폴더 안에 설치합니다.\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 테마 설치 후, Hugo에게 우리가 이 테마를 사용할 것이라고 알려줘야 합니다. hugo.toml 파일을 열어 다음 한 줄을 추가해 주세요.\ntheme = \u0026#39;ananke\u0026#39; 첫 번째 글 작성하기 # 드디어 첫 번째 글을 작성할 시간입니다. Hugo는 명령어를 통해 아주 쉽게 새 글의 초안 파일을 만들 수 있습니다.\nhugo new posts/my-first-post.md 이 명령은 content/posts 폴더 안에 my-first-post.md 라는 마크다운 파일을 생성합니다. 파일을 열어보면 상단에 다음과 같은 Front Matter가 자동으로 생성된 것을 볼 수 있습니다.\n+++ title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T16:29:43+09:00 draft: true +++ 여기서 가장 중요한 것은 draft: true 입니다. 이는 이 글이 아직 초안 상태임을 의미합니다. 글을 발행하려면 이 값을 false로 변경해야 합니다.\n이제 Front Matter 아래에 마크다운 문법으로 자유롭게 글을 작성해 보세요.\n+++ date = \u0026#39;2025-06-25T22:46:21+09:00\u0026#39; draft = false title = \u0026#39;My First Post\u0026#39; +++ ## It is first post Hello world! 로컬 서버에서 블로그 확인하기 # 내가 작성한 글이 블로그에 어떻게 보이는지 확인해 볼까요? Hugo는 내 컴퓨터에서 바로 사이트를 확인해 볼 수 있는 강력한 로컬 서버 기능을 내장하고 있습니다.\n터미널에서 아래 명령어를 실행하세요.\nhugo server -D 여기서 -D 옵션은 draft: true 상태인 초안 글까지 모두 포함해서 보여달라는 의미입니다. 개발 중에는 아주 유용한 옵션이니 기억해 두세요.\n서버가 실행되면 터미널에 다음과 같은 메시지가 나타납니다.\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) 이제 웹 브라우저를 열고 주소창에 http://localhost:1313 을 입력해 보세요.\nAnanke 테마가 적용된 여러분의 첫 블로그가 눈앞에 나타났을 겁니다! 방금 작성한 my-first-post를 클릭해서 들어가 보세요. 글의 내용을 수정하고 저장하면, 브라우저가 자동으로 새로고침되며 변경사항이 즉시 반영되는 것을 확인할 수 있습니다.\n마무리 # 축하합니다! 여러분은 이제 Hugo로 만든 자신만의 블로그를 갖게 되었습니다.\n오늘 우리는 macOS 환경에서 Hugo를 설치하고, 새 사이트를 만들고, 테마를 적용하고, 첫 글을 작성하여 로컬 서버에서 확인하는 전 과정을 함께했습니다.\n궁금한 점이 있다면 언제든지 댓글로 질문해 주세요.\n참조\nHugo 공식 사이트: https://gohugo.io/ Hugo 공식 테마: https://themes.gohugo.io/ Homebrew: https://brew.sh/ ","date":"25 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-mac-os/","section":"Posts","summary":"","title":"MacOS에서 HUGO로 나만의 블로그 만들기","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/","section":"Tags","summary":"","title":"블로그","type":"tags"},{"content":"지난번에는 리눅스와 macOS 환경에 Hugo를 설치하는 과정을 다루었습니다. 성공적으로 Hugo를 설치하셨다면 이제 본격적으로 콘텐츠를 채워나갈 차례입니다.\n오늘은 Hugo 사이트에 새로운 글을 추가하는 가장 대표적인 두 가지 방법에 대해 알아보겠습니다. 바로 Hugo의 기본 명령어인 hugo new를 사용하는 방법과, 이미 작성된 마크다운(.md) 파일을 직접 가져와 추가하는 방법입니다.\n각 방법의 장단점과 사용법을 명확히 이해하면 콘텐츠를 훨씬 효율적으로 관리할 수 있습니다.\nhugo new 명령어 사용하기 # hugo new는 Hugo에서 새 콘텐츠를 생성하는 공식적이고 가장 권장되는 방법입니다. 이 명령어를 사용하면 단순한 파일 생성을 넘어, 미리 설정된 양식(Archetype)에 따라 글의 기본 구조를 자동으로 만들어주기 때문입니다.\nFront Matter란? # hugo new를 이해하려면 먼저 Front Matter라는 개념을 알아야 합니다.\nFront Matter는 마크다운 파일의 가장 윗부분에 위치하는 정보 덩어리로, 해당 콘텐츠의 데이터를 담고 있습니다. 예를 들어 글의 제목, 작성일, 초안(draft) 상태, 태그, 카테고리 등이 여기에 해당합니다. Hugo는 이 정보를 바탕으로 사이트를 생성하고 콘텐츠를 분류합니다.\n주로 YAML(---) 또는 TOML(+++) 형식을 사용합니다.\nhugo new 명령어 사용법 # 터미널에서 Hugo 프로젝트 폴더로 이동한 후, 아래 명령어를 실행합니다.\nhugo new [콘텐츠 섹션]/[파일이름].md 예를 들어 posts라는 섹션에 my-first-post라는 제목의 글을 작성하고 싶다면 다음과 같이 입력합니다.\nhugo new posts/my-first-post.md ![[Pasted image 20250625153225.jpg]]\n명령어를 실행하면 content/posts/ 폴더 안에 my-first-post.md 파일이 생성됩니다. 생성된 파일을 열어보면 다음과 같은 내용이 자동으로 채워져 있습니다.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T14:30:00+09:00 draft: true --- (여기에 글의 본문을 작성합니다.) title: 파일 이름을 기반으로 자동으로 생성됩니다. 큰따옴표 안의 내용을 수정하면 됩니다. date: 파일이 생성된 시점의 날짜와 시간이 자동으로 입력됩니다. draft: true로 설정되어 있습니다. 이는 해당 글이 아직 초안 상태이며, 최종 빌드 시 사이트에 포함되지 않음을 의미합니다. 글 작성을 마친 후 이 값을 false로 변경하거나 줄을 삭제하면 정식으로 발행됩니다. 팁: hugo server -D 명령어로 서버를 실행하면 draft: true 상태인 초안 글도 미리보기 화면에서 확인할 수 있습니다.\n외부 마크다운 파일 직접 가져오기 # 이미 다른 곳(Notion, Obsidian, Typora 등)에서 작성해 둔 마크다운 파일이 있다면 hugo new 명령어를 거치지 않고 직접 파일 시스템에 추가할 수 있습니다.\n이 방법은 매우 간단하지만, 한 가지 필수 작업이 있습니다.\n직접 추가하는 방법 # 가져올 마크다운 파일을 준비합니다. 파일 최상단에 직접 Front Matter를 추가해야 합니다. Hugo가 해당 파일을 인식하고 처리하려면 최소한 title과 date 정보가 필요합니다. Front Matter가 추가된 파일을 원하는 콘텐츠 섹션 폴더(예: content/posts/)로 복사하거나 이동시킵니다. 예를 들어, my-imported-post.md라는 파일을 가져온다고 가정해 보겠습니다.\n파일을 텍스트 편집기로 열어 아래와 같이 Front Matter를 직접 작성해 줍니다.\n--- title: \u0026#34;외부에서 가져온 나의 포스트\u0026#34; date: 2025-06-20T10:00:00+09:00 draft: false tags: [\u0026#34;hugo\u0026#34;, \u0026#34;markdown\u0026#34;] --- 이 글은 외부 마크다운 편집기에서 작성되었습니다. Front Matter만 정확하게 추가해주면 Hugo 사이트에서 문제 없이 인식됩니다. 이렇게 수정한 파일을 content/posts/ 폴더에 넣기만 하면 Hugo가 다음 빌드 시 자동으로 이 파일을 포함하여 사이트를 생성합니다.\n어떤 방법을 사용해야 할까? # 새로운 글을 작성할 때는 hugo new 사용을 권장합니다. 일관된 구조와 필수 정보(특히 draft: true)를 자동으로 생성해주어 실수를 줄여주고 콘텐츠 관리를 체계적으로 만들어주기 때문입니다.\n기존에 작성된 마크다운 파일을 옮겨오거나 다른 플랫폼에서 콘텐츠를 이전할 때는 파일을 직접 추가하는 방법이 효율적입니다. 이때 Front Matter를 정확히 추가하는 것만 잊지 않으면 됩니다.\n두 가지 방법을 모두 알아두고 상황에 맞게 활용하여 즐겁고 효율적인 Hugo 블로깅 라이프를 즐기시길 바랍니다.\n참조\nHugo 공식 문서: hugo new ","date":"24 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/create-new-post/","section":"Posts","summary":"","title":"HUGO 새 글 작성하기","type":"posts"},{"content":"지난 글에서는 Hugo 설치 방법을 다루었습니다. 이번에는 많은 분이 최종 목표로 삼는, https://\u0026lt;내-GitHub계정\u0026gt;.github.io 주소로 접속되는 나만의 대표 블로그를 구축하는 방법을 상세히 알아보겠습니다.\n이것을 GitHub에서는 사용자 사이트(User Site) 라고 부릅니다. GitHub Pages가 제공하는 가장 기본적이면서도 강력한 기능이죠. 복잡한 과정 없이, 오직 여러분의 GitHub 계정만으로 세상에 단 하나뿐인 블로그 주소를 가질 수 있습니다.\nGitHub 저장소(Repository) 생성하기 # 가장 깔끔하고 권장되는 방법은 소스코드와 실제 웹사이트 결과물을 분리하여 관리하는 것입니다. 이를 위해 GitHub에 두 개의 저장소를 생성합니다.\n소스코드 저장소 (Private 권장) # 역할: 로컬에서 작업하는 Hugo 프로젝트 전체(마크다운 글, 설정 파일, 테마 등)를 관리합니다. 이름: 자유롭게 지정합니다. (예: my-tech-blog) 공개 범위: 소스코드는 굳이 공개할 필요가 없으므로 Private으로 설정하는 것을 권장합니다. 배포용 저장소 (Public 필수) # 역할: Hugo가 빌드하여 생성한 최종 HTML, CSS 파일이 올라가는 공간입니다. 실제 블로그 웹사이트가 됩니다. 이름: 반드시 \u0026lt;GitHub계정명\u0026gt;.github.io 형식이어야 합니다. 이 규칙을 지켜야 GitHub Pages가 정상적으로 동작합니다. 공개 범위: 웹사이트로 외부에 공개되어야 하므로 반드시 Public으로 설정해야 합니다. SSH Deploy Key 설정 # 아래의 명령으로 deploy key를 아래와 같이 생성합니다.\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; gh-pages.pub: public key gh-pages: private key 배포용 저장소의 Settings 로 이동 후, Deploy Keys 항목에 public key를 입력후 Allow write access 항목을 체크합니다.\n소스코드 저장소의 Settings 로 이동 후, Secrets에 private key를 ACTIONS_DEPLOY_KEY로 입력합니다. 로컬 Hugo 프로젝트와 GitHub 연동 # 이제 로컬 my-blog 프로젝트 폴더를 방금 만든 소스코드 저장소(my-blog)와 연결합니다.\n로컬 프로젝트 폴더의 터미널에서 다음 명령어를 실행합니다.\n# 1. Git 저장소로 초기화 (이미 실행했다면 생략) git init # 2. 모든 파일 추가 및 첫 커밋 git add . git commit -m \u0026#34;첫 블로그 설정 및 콘텐츠 초기화\u0026#34; git branch -M main # 3. 원격 저장소(소스코드용) 연결 # \u0026lt;GitHub계정명\u0026gt;과 \u0026lt;저장소이름\u0026gt;을 본인의 정보로 변경하세요. git remote add origin https://github.com/\u0026lt;GitHub계정명\u0026gt;/my-tech-blog.git # 4. main 브랜치로 푸시 git push -u origin main Hugo 설정 파일에 URL 업데이트 # 로컬 Hugo 프로젝트의 설정 파일(hugo.toml 또는 config.toml)을 열어 baseURL을 배포용 저장소 주소로 변경해야 합니다. 이 설정은 링크나 리소스 경로가 올바르게 생성되도록 하는 중요한 역할을 합니다.\nhugo.toml 예시\n# baseURL을 실제 서비스될 블로그 주소로 변경합니다. baseURL = \u0026#34;https://\u0026lt;GitHub계정명\u0026gt;.github.io/\u0026#34; languageCode = \u0026#34;ko-kr\u0026#34; title = \u0026#34;나의 개발 블로그\u0026#34; theme = \u0026#34;적용중인_테마이름\u0026#34; # 예: PaperMod GitHub Actions 워크플로우 설정 # 이 단계가 자동화의 심장부입니다. 로컬 소스코드를 push할 때마다 GitHub 서버가 알아서 Hugo 사이트를 빌드하고, \u0026lt;계정명\u0026gt;.github.io 저장소에 결과물을 배포하도록 설정하겠습니다.\n로컬 프로젝트 루트에 .github/workflows 폴더를 만들고, 그 안에 deploy-hugo.yml 같은 이름의 파일을 생성합니다.\n# 폴더 생성 mkdir -p .github/workflows # yml 파일 생성 (macOS/Linux) touch .github/workflows/deploy-hugo.yml deploy-hugo.yml 파일에 아래 내용을 그대로 복사해 붙여넣습니다.\n.github/workflows/deploy-hugo.yml\nname: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: \u0026lt;GitHub계정명\u0026gt;/\u0026lt;GitHub계정명\u0026gt;.github.io publish_branch: master # default: gh-pages publish_dir: ./public external_repository: \u0026lt;GitHub계정명\u0026gt;/\u0026lt;GitHub계정명\u0026gt;.github.io 배포용 저장소 작성한 deploy-hugo.yml 파일을 저장합니다.\n소스코드 Push 및 배포 최종 확인 # 이제 마지막입니다. 로컬에서 변경된 내용(워크플로우 파일 추가 등)을 다시 소스코드 저장소로 push합니다.\ngit add . git commit -m \u0026#34;Add GitHub Actions workflow for auto-deployment\u0026#34; git push push가 완료되면, GitHub의 소스코드 저장소(my-blog)로 이동하여 Actions 탭을 클릭합니다.\nDeploy Hugo site to GitHub Pages 워크플로우가 자동으로 실행되는 것을 볼 수 있습니다. build와 deploy 작업이 순서대로 진행되며, 몇 분 후 모두 녹색 체크 표시로 바뀌면 성공입니다.\n최종 확인:\n이제 웹 브라우저를 열고 https://\u0026lt;GitHub계정명\u0026gt;.github.io 로 접속해 보세요. 로컬에서 hugo server로 보던 것과 동일한 블로그가 온라인에 게시된 것을 확인할 수 있습니다.\nTrouble Shooting # deploy 동작이 정상적을 완료되었지만, 블로그가 정상적으로 표시되지 않을 수 있습니다. 이 경우 배포용 저장소의 배포 위치를 확인해 주세요\nSource: Deploy from a branch Branch: master(main) - /docs 정리하며 # 축하합니다! 이제 여러분은 git push 한 번으로 글을 발행할 수 있는 근사한 자동화 블로그를 소유하게 되었습니다. 여러분의 지식과 경험을 이 새로운 공간에 차곡차곡 쌓아나가시길 바랍니다.\n","date":"23 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/deploy-hugo-on-github-pages-with-actions/","section":"Posts","summary":"","title":"HUGO 블로그, GitHub Actions로 자동 배포하기","type":"posts"},{"content":"코딩과 글쓰기를 좋아하시는 분들이라면, PC 앞에 앉아야만 작업할 수 있다는 점이 때로는 번거롭게 느껴지셨을 겁니다. 만약 스마트폰만으로 언제 어디서든 블로그 글을 작성하고, 빌드하고, 테스트까지 할 수 있다면 어떨까요?\n이 가이드에서는 여러분의 스마트폰을 강력한 개발 환경으로 만들어주는 Termux와, 빠르고 유연한 정적 사이트 생성기 Hugo를 이용해 나만의 블로그를 만드는 방법을 알아봅니다.\n시작하기 전에: Termux 설치 확인 # 본격적인 시작에 앞서, 가장 핵심적인 준비물인 Termux 앱이 스마트폰에 설치되어 있어야 합니다.\n✅ 아직 Termux를 설치하지 않으셨나요?\n괜찮습니다. Termux의 설치부터 기본 설정까지 자세히 다룬 제 이전 글이 있습니다. 아래 링크의 글을 먼저 따라 설치를 완료하신 후, 다시 이 글로 돌아와 다음 단계를 진행해 주세요.\n[➡️ 참조: Android Termux에서 Hugo 블로그 만들기 ]\nTermux가 준비되셨다면, 이제 Hugo 블로그를 만들 준비가 거의 끝났습니다.\nTermux 환경 준비 및 업데이트 # 가장 먼저, 기존에 설치된 Termux의 패키지를 최신 상태로 만들어 개발 환경을 깔끔하게 준비하겠습니다. 오래된 패키지와의 충돌을 방지하는 중요한 과정입니다.\nTermux를 실행하고 아래 명령어를 입력하세요. 패키지 목록을 갱신하고 설치된 패키지를 최신 버전으로 업그레이드합니다.\npkg update \u0026amp;\u0026amp; pkg upgrade 중간에 Do you want to continue? [Y/n] 와 같은 질문이 나오면 Y를 누르고 엔터를 입력하면 됩니다. 이 과정이 오류 없이 완료되었다면, 다음 단계로 넘어갈 준비가 된 것입니다.\nHugo와 Git 설치하기 # 블로그를 만들기 위해 필요한 핵심 도구들을 설치할 차례입니다.\nHugo: Go 언어로 만들어진 매우 빠른 정적 사이트 생성기(Static Site Generator, SSG)입니다. Git: 버전 관리 시스템입니다. Hugo 테마를 다운로드하거나, 나중에 블로그 코드를 GitHub 등에 백업할 때 필수적입니다. 아래 명령어로 두 패키지를 한 번에 설치합니다.\npkg install hugo git 설치가 잘 되었는지 확인해볼까요? 아래 명령어를 각각 입력하여 버전 정보가 나오면 성공입니다.\nhugo version git version Hugo 블로그 사이트 생성 # 이제 본격적으로 블로그의 뼈대를 만들어 보겠습니다.\n새 사이트 생성 hugo new site 명령어 뒤에 원하는 폴더 이름을 지정합니다. 여기서는 my-blog라는 이름으로 만들겠습니다.\nhugo new site my-blog 생성된 폴더로 이동 cd 명령어를 사용해 방금 만든 my-blog 폴더 안으로 들어갑니다.\ncd my-blog 테마 설치 및 적용 # 디자인 테마를 적용하여 블로그에 옷을 입혀야 합니다. 인기 있는 ananke 테마를 예시로 설치해 보겠습니다.\nGit으로 테마 추가 Git의 submodule 기능을 이용해 테마를 추가합니다.\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 설정 파일에 테마 적용 nano hugo.toml 명령어로 설정 파일을 열고, 아래 내용을 참고하여 수정하거나 추가합니다.\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;ko-kr\u0026#39; title = \u0026#39;나의 첫 Hugo 블로그\u0026#39; theme = \u0026#39;ananke\u0026#39; 수정이 끝났으면 Ctrl + X, Y, Enter 순서로 눌러 저장하고 빠져나옵니다.\n첫 번째 글 작성하기 # hugo new content 명령어로 첫 글의 파일을 생성합니다.\nhugo new content posts/my-first-post.md nano content/posts/my-first-post.md 명령어로 파일을 열고, draft: true를 draft: false로 변경한 후 내용을 작성하세요.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T09:25:37+09:00 draft: false --- ## 안녕하세요! 여기는 제 첫 번째 Hugo 블로그 글입니다. **Termux**와 **Hugo**를 사용해서 만들었죠. - 정말 간편합니다. - 어디서든 작업할 수 있습니다. 로컬 서버 실행 및 확인 # 모든 준비가 끝났습니다. Hugo에 내장된 개발용 웹 서버를 실행하여 결과를 확인해 보겠습니다.\nmy-blog 폴더 안에서 아래 명령어를 실행하세요.\nhugo server 서버가 실행되면 Web Server is available at http://localhost:1313/ 메시지가 나타납니다. 스마트폰의 웹 브라우저를 열고 주소창에 http://localhost:1313을 입력해 보세요.\n여러분이 직접 만든 블로그가 눈앞에 나타날 것입니다.\n다음 단계는? # 축하합니다! 이제 여러분은 스마트폰만으로 Hugo 블로그를 만들고 관리할 수 있는 환경을 완벽하게 갖추었습니다.\n다음 목표는 이 블로그를 GitHub Pages나 Netlify 같은 서비스를 통해 웹에 **배포(Deploy)**하여 전 세계 누구나 접속할 수 있도록 만드는 것입니다. 이 과정은 다음 글에서 자세히 다루도록 하겠습니다.\n이제 여러분의 손안에 강력한 블로깅 도구가 생겼습니다. 언제 어디서든 떠오르는 영감을 놓치지 말고 기록하고, 여러분의 지식과 경험을 세상과 공유해 보세요.\n","date":"22 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-android-termux/","section":"Posts","summary":"","title":"Android Termux에서 HUGO 블로그 만들기","type":"posts"},{"content":"","date":"21 June 2025","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":" # 오늘은 개발자들 사이에서 빠르고 강력하기로 정평이 난 정적 사이트 생성기(SSG), Hugo를 사용하여 Ubuntu 환경에서 나만의 블로그를 만드는 전체 과정을 안내해 드리겠습니다.\nWordPress와 같은 동적 CMS에 익숙하신 분들께 \u0026lsquo;정적 사이트\u0026rsquo;라는 개념이 낯설 수 있습니다. 간단히 설명하자면, 사용자가 요청할 때마다 데이터베이스를 거쳐 페이지를 만드는 동적 방식과 달리, 정적 사이트는 미리 완성된 HTML 파일을 서버에 올려두고 그대로 보여주는 방식입니다. 이 덕분에 로딩 속도가 매우 빠르고, 데이터베이스가 없어 보안에도 훨씬 유리합니다.\n이 가이드는 Ubuntu 환경과 터미널 사용에 어느 정도 익숙한 분들을 대상으로 합니다. 차근차근 따라오시면, 누구나 자신만의 빠르고 멋진 블로그를 가질 수 있습니다.\nHugo 설치하기 # 가장 먼저 할 일은 Hugo를 우리 Ubuntu 시스템에 설치하는 것입니다. 여러 방법이 있지만, 패키지 관리자인 snap을 이용하는 것이 가장 간단하고 최신 버전을 유지하기 좋습니다.\nsudo snap install hugo 설치가 완료되면, 버전 확인 명령어로 제대로 설치되었는지 확인합니다.\nhugo version 만약 hugo v0.127.0-... 와 같은 버전 정보가 출력된다면 성공적으로 설치된 것입니다.\n새 블로그 프로젝트 생성 # 이제 Hugo를 이용하여 블로그의 기본 뼈대를 만들 차례입니다. 원하는 경로로 이동한 후, 아래 명령어를 실행하여 my-blog라는 이름의 새 사이트를 생성합니다. (물론 my-blog는 원하는 이름으로 변경 가능합니다.)\nhugo new site my-blog 명령이 실행되면 my-blog라는 디렉토리가 생성되고, 그 안에는 다음과 같은 Hugo의 표준 디렉토리 구조가 만들어집니다.\nmy-blog/ ├── archetypes/ ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── hugo.toml 각 디렉토리의 역할은 간단히 다음과 같습니다.\ncontent/: 실제 블로그 글(마크다운 파일)이 저장되는 곳입니다. themes/: 블로그의 디자인을 담당하는 테마가 위치합니다. static/: 이미지, CSS, JavaScript 등 정적 파일들을 넣는 곳입니다. hugo.toml: 블로그의 제목, 언어, 테마 등 전반적인 설정을 담당하는 파일입니다. 테마 선택 및 적용 # 뼈대만 있는 블로그에 디자인 테마를 입혀야 합니다. Hugo는 전 세계 개발자들이 만들어 공유하는 수많은 테마를 자랑합니다.\nHugo 공식 테마 사이트 에서 마음에 드는 테마를 골라보세요.\n이 가이드에서는 \u0026lsquo;Ananke\u0026rsquo;라는 인기 있고 깔끔한 테마를 예시로 사용하겠습니다. my-blog 디렉토리 안에서 다음 명령어를 실행하여 테마를 설치합니다.\ncd my-blog git init # 아직 git 저장소가 아니라면 초기화합니다. git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke git submodule을 사용하는 이유는 테마의 원본 저장소와 연결을 유지하여, 나중에 테마가 업데이트되었을 때 쉽게 반영할 수 있기 때문입니다.\n이제 설치한 테마를 블로그에 적용할 차례입니다. hugo.toml 설정 파일을 열고 맨 아래에 다음 한 줄을 추가합니다.\ntheme = \u0026#39;ananke\u0026#39; 첫 번째 글 작성하기 # 블로그의 핵심은 콘텐츠입니다. Hugo는 마크다운(.md) 형식으로 글을 작성합니다. 터미널에서 아래 명령어로 첫 번째 글을 생성해 보겠습니다.\nhugo new content posts/my-first-post.md 이 명령은 content/posts/ 디렉토리 안에 my-first-post.md 파일을 생성합니다. 이제 텍스트 에디터로 이 파일을 열어보겠습니다.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T10:25:51+09:00 draft: true --- 여기에 본문 내용을 작성합니다. **안녕하세요, Hugo!** 파일 상단의 ---로 둘러싸인 부분을 Front Matter라고 부릅니다. 글의 제목, 작성일, 공개 여부 등 메타데이터를 정의하는 중요한 영역입니다.\n가장 중요한 점! draft: true는 이 글이 아직 초고 상태임을 의미합니다. 블로그에 정식으로 발행하려면 이 값을 draft: false로 변경하거나 이 줄을 삭제해야 합니다.\n이제 Front Matter 아래에 자유롭게 마크다운 문법으로 글을 작성하면 됩니다.\n로컬 서버에서 확인하기 # 작성한 글이 블로그에서 어떻게 보일지 궁금하실 겁니다. Hugo는 강력한 내장 웹 서버를 제공하여, 내 컴퓨터에서 실시간으로 변경사항을 확인하며 작업할 수 있습니다.\nmy-blog 디렉토리에서 아래 명령어를 실행하세요.\nhugo server -D 여기서 -D 옵션은 draft: true 상태인 초고 글까지 모두 포함해서 보여달라는 의미입니다. 개발 중에는 아주 유용한 옵션입니다.\n터미널에 다음과 같은 메시지가 나타날 것입니다.\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) 이제 웹 브라우저를 열고 주소창에 http://localhost:1313을 입력해 보세요. 방금 설치한 Ananke 테마가 적용되고, 작성한 첫 번째 글이 목록에 나타나는 것을 확인할 수 있습니다.\n마치며 # 지금까지 Ubuntu 환경에서 Hugo를 설치하고, 블로그를 생성하여 첫 글을 작성하고, 서버에 배포할 파일을 만드는 전체 과정을 알아보았습니다.\nHugo는 처음에는 조금 낯설 수 있지만, 일단 익숙해지면 그 속도와 단순함, 그리고 강력한 기능에 매료될 것입니다. 오늘 만든 기본 블로그를 바탕으로 자신만의 테마를 만들거나, 다양한 설정을 변경하며 개성 있는 블로그로 발전시켜 나가시길 바랍니다.\n궁금한 점이 있다면 언제든 댓글로 질문해 주세요. 여러분의 성공적인 블로그 운영을 응원하겠습니다.\n참조:\nHugo 공식 문서: https://gohugo.io/documentation/ Hugo 테마 사이트: https://themes.gohugo.io/ ","date":"21 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-ubuntu/","section":"Posts","summary":"","title":"Ubuntu에서 HUGO로 나만의 블로그 만들기","type":"posts"},{"content":"우리가 매일 사용하는 스마트폰은 강력한 AP와 충분한 메모리를 갖춘 훌륭한 개발 및 서버 관리 도구가 될 수 있습니다. 그 중심에는 Termux라는 강력한 터미널 앱이 있습니다. 이번 글에서는 Termux를 \u0026lsquo;올바르게\u0026rsquo; 설치하고 개발에 필요한 기본 환경을 설정하는 방법을 2025년 최신 정보 기준으로 다시 한번 알려드립니다.\nPlay 스토어 vs F-Droid # 많은 분들이 습관적으로 구글 플레이 스토어에서 앱을 검색하고 설치합니다. 하지만 Termux의 경우, 이것이 가장 큰 실수를 유발하는 지점입니다.\n결론부터 말씀드리겠습니다. 2025년 현재, 구글 플레이 스토어에 등록된 Termux는 여전히 업데이트가 중단된 deprecated(사용 중단) 버전입니다.\n사용자분께서 Play 스토어에서 업데이트가 된다고 보셨다면, 이는 Termux의 플러그인(Add-on)이거나, 유사한 이름의 다른 앱일 가능성이 높습니다. 공식 com.termux 앱 패키지는 다음과 같은 이유로 Play 스토어에서 사용해서는 안 됩니다.\n업데이트 중단: 2020년 9월 이후로 메인 앱의 업데이트가 없습니다. 보안 취약점: 5년 가까이 업데이트되지 않은 패키지는 수많은 보안 취약점을 내포하고 있습니다. 저장소(Repository) 문제: 패키지를 다운로드하는 서버 주소가 변경되어 pkg update 같은 핵심 명령어가 정상적으로 동작하지 않습니다. Termux 개발팀은 이러한 문제 때문에 공식적으로 F-Droid 또는 GitHub를 통한 설치를 권장하고 있습니다.\n따라서, Termux의 모든 기능을 안전하고 정상적으로 사용하려면 반드시 F-Droid 또는 GitHub에서 직접 설치해야 합니다. 이 점을 다시 한번 강조합니다.\nTermux 설치하기 # F-Droid는 안드로이드용 자유-오픈 소스 소프트웨어(FOSS)를 제공하는 신뢰할 수 있는 저장소입니다.\nF-Droid 웹사이트 방문 아래 링크를 통해 F-Droid의 Termux 페이지로 이동합니다. https://f-droid.org/packages/com.termux/ APK 파일 다운로드 페이지를 아래로 스크롤하여 \u0026lsquo;Versions\u0026rsquo; 섹션을 찾고, 가장 최신 버전의 \u0026lsquo;Download APK\u0026rsquo; 버튼을 눌러 설치 파일을 다운로드합니다.\n설치 진행 다운로드한 APK 파일을 실행하여 설치합니다. \u0026lsquo;알 수 없는 출처의 앱 설치\u0026rsquo; 권한이 필요할 수 있습니다. 안드로이드 시스템의 안내에 따라 권한을 허용하고 설치를 완료합니다.\nTermux 초기 설정 # 설치를 완료하고 앱을 실행하면, 검은 화면에 커서가 깜빡이는 익숙한 터미널 환경을 마주하게 됩니다. 가장 먼저 패키지들을 최신 상태로 만들어야 합니다.\n아래 명령어를 입력하세요.\npkg update \u0026amp;\u0026amp; pkg upgrade pkg: Termux에서 사용하는 패키지 관리자입니다. Debian 계열 리눅스의 apt와 유사한 역할을 합니다. update: 설치 가능한 패키지 목록을 최신 정보로 갱신합니다. upgrade: 현재 설치된 패키지들을 최신 버전으로 업그레이드합니다. 중간에 몇 가지 질문이 나올 수 있는데, 기본값(Y 또는 N)을 선택하여 엔터를 누르면 무난하게 진행됩니다.\n필수 도구 설치하기 # 이제 개발에 필요한 핵심 도구들을 설치해 보겠습니다.\n저장소 접근 설정 # Termux가 스마트폰의 파일 시스템(다운로드, 사진 폴더 등)에 접근하려면 권한 설정이 필요합니다.\ntermux-setup-storage 위 명령어를 실행하면 저장 공간 접근 권한을 요청하는 팝업이 나타납니다. \u0026lsquo;허용\u0026rsquo; 을 선택하세요.\n이제 홈 디렉터리(~)에 storage라는 이름의 심볼릭 링크(바로가기)가 생성됩니다. 이 폴더를 통해 스마트폰 내부 저장소에 접근할 수 있습니다.\n텍스트 에디터 (nano) # 간단한 스크립트나 설정 파일을 수정하려면 텍스트 에디터가 필요합니다. nano는 사용법이 직관적이라 초심자에게 적합합니다.\npkg install nano SSH 클라이언트 (openssh) # 원격 서버에 접속하여 작업하는 것은 개발자의 기본 업무 중 하나입니다. openssh를 설치하여 SSH 클라이언트를 사용할 수 있습니다.\npkg install openssh 아래 명령을 통해서 ssh key를 생성합니다.\nssh keygen ~/.ssh 폴더 내부에, id_ed25519 , id_ed25519.pub 파일이 정상적으로 생성완료 되면, ssh 접속을 사용할 수 있습니다.\n버전 관리 시스템 (git) # 소스 코드 관리를 위해 Git은 필수입니다.\npkg install git 프로그래밍 언어 (Python) # 다양한 자동화 스크립트 및 개발에 널리 사용되는 Python을 설치해 보겠습니다.\npkg install python 마치며 # 정확한 정보를 바탕으로 올바른 도구를 사용하는 것이 안전하고 효율적인 개발의 첫걸음입니다. F-Droid를 통해 최신 버전의 Termux를 설치하여, 안전하고 강력한 휴대용 개발 환경을 구축하시길 바랍니다.\n이제 여러분의 안드로이드 기기는 언제 어디서든 사용할 수 있는 훌륭한 보조 개발 머신이 되었습니다.\n참조\nTermux 공식 웹사이트: https://termux.dev/en/ Termux F-Droid 페이지: https://f-droid.org/packages/com.termux/ ","date":"19 June 2025","externalUrl":null,"permalink":"/posts/apps/termux/termux-setup-on-android/","section":"Posts","summary":"","title":"안드로이드, 리눅스 머신으로 변신시키기: Termux 설치와 기본 설정 가이드 (2025년 최신판)","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]