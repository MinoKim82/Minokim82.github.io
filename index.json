[{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"수많은 HUGO 테마 중에서도 압도적인 인기를 자랑하는 테마가 있습니다. 바로 PaperMod 입니다. 빠른 속도, 미니멀한 디자인, 강력한 기능(SEO, 다크 모드, 검색 등)을 모두 갖추고 있어 전 세계 수많은 블로거와 개발자들의 사랑을 받고 있습니다.\n오늘은 기존에 운영하던 Hugo 블로그에 바로 이 PaperMod 테마를 적용하는 방법을, 처음부터 끝까지 상세하게 안내해 드리겠습니다.\n기존 테마 깔끔하게 제거하기 # 새로운 옷을 입기 전, 기존 옷을 먼저 정리해야겠죠. 현재 사용 중인 테마를 깔끔하게 제거하는 것부터 시작하겠습니다. 테마 설치 방식에 따라 아래 방법 중 하나를 선택하세요.\nGit 서브모듈로 설치된 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. git submodule deinit -f themes/old-theme git rm -f themes/old-theme rm -rf .git/modules/themes/old-theme 이 명령어들은 단순히 폴더를 지우는 것을 넘어, Git의 추적 기록까지 완전히 정리해 줍니다.\n직접 다운로드하여 설치한 경우: # # 이전 테마 폴더가 \u0026#39;themes/old-theme\u0026#39; 라고 가정합니다. rm -rf themes/old-theme 또는 파일 탐색기에서 직접 themes/old-theme 폴더를 삭제해도 됩니다.\nPaperMod 테마 설치하기 # 이제 오늘의 주인공, PaperMod 테마를 설치할 차례입니다. 추후 테마 관리를 위해 Git 서브모듈 방식을 사용하는 것이 가장 좋습니다.\nGit 서브모듈로 추가:\n프로젝트의 최상위 폴더에서 아래 명령어를 입력합니다.\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod themes 폴더 안에 PaperMod라는 이름으로 테마가 설치됩니다.\n팁: PaperMod 테마는 다른 복잡한 테마들과 달리 Hugo Extended 버전이 필요 없습니다. 일반 Hugo 버전으로도 모든 기능을 완벽하게 사용할 수 있어 설치가 더욱 간편합니다.\nhugo.toml 설정하기 # PaperMod의 기능을 활성화하기 위해 블로그의 메인 설정 파일인 config.toml을 수정해야 합니다. 아래는 가장 기본적인 설정 예시입니다. 기존 설정을 참고하여 내용을 수정하거나 추가하세요.\nIni, TOML\nbaseURL = \u0026#34;https://your-blog-url.com/\u0026#34; languageCode = \u0026#34;ko-kr\u0026#34; title = \u0026#34;나의 PaperMod 블로그\u0026#34; theme = \u0026#34;PaperMod\u0026#34; # 테마를 PaperMod로 지정 [params] author = \u0026#34;블로거 이름\u0026#34; description = \u0026#34;PaperMod 테마를 적용한 제 블로그입니다.\u0026#34; defaultTheme = \u0026#34;auto\u0026#34; # \u0026#34;auto\u0026#34;, \u0026#34;light\u0026#34;, \u0026#34;dark\u0026#34; 중 선택 ShowReadingTime = true # 글 읽는 시간 표시 ShowShareButtons = true # 공유 버튼 표시 ShowPostNavLinks = true # 이전/다음 글 링크 표시 # 메인 페이지 설정 [params.homeInfoParams] Title = \u0026#34;안녕하세요! 👋\u0026#34; Content = \u0026#34;이곳은 PaperMod 테마로 만든 블로그입니다. 깔끔하고 빠르죠.\u0026#34; # 소셜 아이콘 설정 (예시) [[params.socialIcons]] name = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/your-github-id\u0026#34; [[params.socialIcons]] name = \u0026#34;linkedin\u0026#34; url = \u0026#34;https://www.linkedin.com/in/your-linkedin-id/\u0026#34; # 메인 메뉴 설정 [menu] [[menu.main]] identifier = \u0026#34;archives\u0026#34; name = \u0026#34;글 목록\u0026#34; url = \u0026#34;/archives/\u0026#34; weight = 10 [[menu.main]] identifier = \u0026#34;search\u0026#34; name = \u0026#34;검색\u0026#34; url = \u0026#34;/search/\u0026#34; weight = 20 [[menu.main]] identifier = \u0026#34;tags\u0026#34; name = \u0026#34;태그\u0026#34; url = \u0026#34;/tags/\u0026#34; weight = 30 PaperMod는 이 외에도 수많은 설정(파라미터)을 제공합니다. 더 상세한 커스터마이징을 원하시면 공식 문서를 꼭 참고하세요.\n참조: PaperMod 테마 공식 위키 - 설정 가이드 로컬 확인 및 최종 배포 # 모든 준비가 끝났습니다. 로컬 서버를 실행하여 디자인이 의도대로 적용되었는지 최종 확인합니다.\n# -D 옵션은 draft(초안) 상태의 글도 함께 보여줍니다. hugo server -D 브라우저에서 http://localhost:1313 으로 접속하여 새로운 블로그의 모습을 확인하세요. 메인 페이지, 글 목록, 검색 기능이 모두 잘 작동한다면 성공입니다.\n마지막으로, 변경된 내용을 서버에 배포합니다.\n# 모든 변경사항 추가 git add . # 테마 변경을 알리는 커밋 메시지 작성 git commit -m \u0026#34;Feat: Apply PaperMod theme\u0026#34; # 원격 저장소에 푸시하여 배포 완료 git push 마무리하며 # PaperMod 테마는 미니멀리즘과 강력한 기능 사이에서 완벽한 균형을 이룬, 그야말로 \u0026lsquo;정석\u0026rsquo;과도 같은 테마입니다. 직접 적용해보시면 왜 이 테마가 그토록 많은 사랑을 받는지 바로 체감하실 수 있을 겁니다.\n이제 여러분의 블로그는 더 빠르고, 더 읽기 편하고, 더 전문적인 모습으로 방문자들을 맞이할 준비를 마쳤습니다.\n","date":"25 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/change-theme-to-papermod/","section":"Posts","summary":"","title":"HUGO 블로그 최고 인기 테마, PaperMod 적용 완벽 가이드","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/macos/","section":"Tags","summary":"","title":"MacOS","type":"tags"},{"content":"오늘은 빠르고 간결하기로 소문난 정적 사이트 생성기(Static Site Generator, SSG), Hugo를 사용하여 macOS 환경에서 나만의 블로그를 만드는 방법을 알아보겠습니다. 워드프레스와 같은 동적 사이트와 달리, Hugo는 데이터베이스나 복잡한 서버 로직 없이 순수 HTML, CSS, JS 파일로 웹사이트를 생성합니다. 덕분에 비교할 수 없이 빠른 속도, 강력한 보안, 그리고 무료에 가까운 호스팅 비용이라는 엄청난 장점을 가집니다.\n본격적인 시작에 앞서 준비물 확인하기 # 딱 한 가지만 준비하면 됩니다. 바로 Homebrew입니다. Homebrew는 macOS용 패키지 관리자로, 터미널 명령 한 줄로 각종 소프트웨어를 간단하게 설치할 수 있게 해주는 필수 도구입니다. 터미널을 열고 아래 명령어를 입력해 Homebrew가 설치되어 있는지 확인해 보세요.\nbrew --version 만약 버전 정보가 출력된다면 이미 설치된 것입니다. command not found와 같은 메시지가 나온다면, 아래 명령어를 터미널에 붙여넣어 Homebrew를 설치해 주세요.\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; Hugo 설치하기 # Homebrew가 준비되었다면 Hugo 설치는 식은 죽 먹기입니다. 터미널에 다음 명령어를 입력하세요.\nbrew install hugo 설치가 완료되면 Homebrew 때와 마찬가지로 버전 확인 명령어로 제대로 설치되었는지 확인합니다.\nhugo version 버전 정보가 보인다면 성공입니다. 이제 블로그를 만들 모든 준비가 끝났습니다.\n내 블로그 사이트 생성하기 # 이제 Hugo를 이용해 블로그의 뼈대를 만들어 보겠습니다. 원하는 경로로 이동한 후, 다음 명령어를 실행하세요. my-blog 부분은 여러분이 원하는 폴더 이름으로 변경해도 좋습니다.\nhugo new site my-blog 명령을 실행하면 my-blog라는 폴더가 생성되고, 그 안에 Hugo 사이트를 구성하는 기본 폴더와 파일들이 자동으로 만들어집니다.\n생성된 my-blog 폴더로 이동해 볼까요?\ncd my-blog ls -l 명령어로 폴더 구조를 살펴보면 다음과 같은 폴더들이 보일 겁니다.\narchetypes: 새 콘텐츠 파일의 기본 양식을 정의합니다. content: 여러분이 작성할 블로그 글(마크다운 파일)이 저장되는 곳입니다. data: 사이트에서 사용할 수 있는 구조화된 데이터 파일(YAML, JSON, TOML)을 저장합니다. layouts: 웹사이트의 HTML 템플릿 파일이 위치합니다. static: 이미지, CSS, JavaScript 파일 등 정적 자원들을 저장합니다. themes: 블로그의 디자인을 담당하는 테마가 설치되는 폴더입니다. hugo.toml: 사이트의 전반적인 설정을 담당하는 가장 중요한 파일입니다. 블로그 디자인(테마) 입히기 # 뼈대만 있는 블로그는 의미가 없겠죠? 이제 디자인을 입힐 차례입니다. Hugo는 전 세계 개발자들이 만들어 공유하는 수많은 무료 테마를 제공합니다.\nHugo 공식 테마 사이트 에서 마음에 드는 테마를 골라보세요.\n이 가이드에서는 입문용으로 가장 많이 사용되는 Ananke 테마를 기준으로 설명하겠습니다.\n먼저, 방금 만든 내 블로그 폴더를 Git 저장소로 초기화해야 합니다. 테마는 보통 Git Submodule이라는 기능으로 관리하는 것이 가장 편리하기 때문입니다.\ngit init 이제 아래 명령어로 Ananke 테마를 themes 폴더 안에 설치합니다.\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 테마 설치 후, Hugo에게 우리가 이 테마를 사용할 것이라고 알려줘야 합니다. hugo.toml 파일을 열어 다음 한 줄을 추가해 주세요.\ntheme = \u0026#39;ananke\u0026#39; 첫 번째 글 작성하기 # 드디어 첫 번째 글을 작성할 시간입니다. Hugo는 명령어를 통해 아주 쉽게 새 글의 초안 파일을 만들 수 있습니다.\nhugo new posts/my-first-post.md 이 명령은 content/posts 폴더 안에 my-first-post.md 라는 마크다운 파일을 생성합니다. 파일을 열어보면 상단에 다음과 같은 Front Matter가 자동으로 생성된 것을 볼 수 있습니다.\n+++ title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T16:29:43+09:00 draft: true +++ 여기서 가장 중요한 것은 draft: true 입니다. 이는 이 글이 아직 초안 상태임을 의미합니다. 글을 발행하려면 이 값을 false로 변경해야 합니다.\n이제 Front Matter 아래에 마크다운 문법으로 자유롭게 글을 작성해 보세요.\n+++ date = \u0026#39;2025-06-25T22:46:21+09:00\u0026#39; draft = false title = \u0026#39;My First Post\u0026#39; +++ ## It is first post Hello world! 로컬 서버에서 블로그 확인하기 # 내가 작성한 글이 블로그에 어떻게 보이는지 확인해 볼까요? Hugo는 내 컴퓨터에서 바로 사이트를 확인해 볼 수 있는 강력한 로컬 서버 기능을 내장하고 있습니다.\n터미널에서 아래 명령어를 실행하세요.\nhugo server -D 여기서 -D 옵션은 draft: true 상태인 초안 글까지 모두 포함해서 보여달라는 의미입니다. 개발 중에는 아주 유용한 옵션이니 기억해 두세요.\n서버가 실행되면 터미널에 다음과 같은 메시지가 나타납니다.\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) 이제 웹 브라우저를 열고 주소창에 http://localhost:1313 을 입력해 보세요.\nAnanke 테마가 적용된 여러분의 첫 블로그가 눈앞에 나타났을 겁니다! 방금 작성한 my-first-post를 클릭해서 들어가 보세요. 글의 내용을 수정하고 저장하면, 브라우저가 자동으로 새로고침되며 변경사항이 즉시 반영되는 것을 확인할 수 있습니다.\n마무리 # 축하합니다! 여러분은 이제 Hugo로 만든 자신만의 블로그를 갖게 되었습니다.\n오늘 우리는 macOS 환경에서 Hugo를 설치하고, 새 사이트를 만들고, 테마를 적용하고, 첫 글을 작성하여 로컬 서버에서 확인하는 전 과정을 함께했습니다.\n궁금한 점이 있다면 언제든지 댓글로 질문해 주세요.\n참조\nHugo 공식 사이트: https://gohugo.io/ Hugo 공식 테마: https://themes.gohugo.io/ Homebrew: https://brew.sh/ ","date":"25 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-mac-os/","section":"Posts","summary":"","title":"MacOS에서 HUGO로 나만의 블로그 만들기","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/tags/%EB%B8%94%EB%A1%9C%EA%B7%B8/","section":"Tags","summary":"","title":"블로그","type":"tags"},{"content":"","date":"25 June 2025","externalUrl":null,"permalink":"/categories/%ED%98%B8%EC%8A%A4%ED%8C%85/","section":"Categories","summary":"","title":"호스팅","type":"categories"},{"content":"지난번에는 리눅스와 macOS 환경에 Hugo를 설치하는 과정을 다루었습니다. 성공적으로 Hugo를 설치하셨다면 이제 본격적으로 콘텐츠를 채워나갈 차례입니다.\n오늘은 Hugo 사이트에 새로운 글을 추가하는 가장 대표적인 두 가지 방법에 대해 알아보겠습니다. 바로 Hugo의 기본 명령어인 hugo new를 사용하는 방법과, 이미 작성된 마크다운(.md) 파일을 직접 가져와 추가하는 방법입니다.\n각 방법의 장단점과 사용법을 명확히 이해하면 콘텐츠를 훨씬 효율적으로 관리할 수 있습니다.\nhugo new 명령어 사용하기 # hugo new는 Hugo에서 새 콘텐츠를 생성하는 공식적이고 가장 권장되는 방법입니다. 이 명령어를 사용하면 단순한 파일 생성을 넘어, 미리 설정된 양식(Archetype)에 따라 글의 기본 구조를 자동으로 만들어주기 때문입니다.\nFront Matter란? # hugo new를 이해하려면 먼저 Front Matter라는 개념을 알아야 합니다.\nFront Matter는 마크다운 파일의 가장 윗부분에 위치하는 정보 덩어리로, 해당 콘텐츠의 데이터를 담고 있습니다. 예를 들어 글의 제목, 작성일, 초안(draft) 상태, 태그, 카테고리 등이 여기에 해당합니다. Hugo는 이 정보를 바탕으로 사이트를 생성하고 콘텐츠를 분류합니다.\n주로 YAML(---) 또는 TOML(+++) 형식을 사용합니다.\nhugo new 명령어 사용법 # 터미널에서 Hugo 프로젝트 폴더로 이동한 후, 아래 명령어를 실행합니다.\nhugo new [콘텐츠 섹션]/[파일이름].md 예를 들어 posts라는 섹션에 my-first-post라는 제목의 글을 작성하고 싶다면 다음과 같이 입력합니다.\nhugo new posts/my-first-post.md ![[Pasted image 20250625153225.jpg]]\n명령어를 실행하면 content/posts/ 폴더 안에 my-first-post.md 파일이 생성됩니다. 생성된 파일을 열어보면 다음과 같은 내용이 자동으로 채워져 있습니다.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T14:30:00+09:00 draft: true --- (여기에 글의 본문을 작성합니다.) title: 파일 이름을 기반으로 자동으로 생성됩니다. 큰따옴표 안의 내용을 수정하면 됩니다. date: 파일이 생성된 시점의 날짜와 시간이 자동으로 입력됩니다. draft: true로 설정되어 있습니다. 이는 해당 글이 아직 초안 상태이며, 최종 빌드 시 사이트에 포함되지 않음을 의미합니다. 글 작성을 마친 후 이 값을 false로 변경하거나 줄을 삭제하면 정식으로 발행됩니다. 팁: hugo server -D 명령어로 서버를 실행하면 draft: true 상태인 초안 글도 미리보기 화면에서 확인할 수 있습니다.\n외부 마크다운 파일 직접 가져오기 # 이미 다른 곳(Notion, Obsidian, Typora 등)에서 작성해 둔 마크다운 파일이 있다면 hugo new 명령어를 거치지 않고 직접 파일 시스템에 추가할 수 있습니다.\n이 방법은 매우 간단하지만, 한 가지 필수 작업이 있습니다.\n직접 추가하는 방법 # 가져올 마크다운 파일을 준비합니다. 파일 최상단에 직접 Front Matter를 추가해야 합니다. Hugo가 해당 파일을 인식하고 처리하려면 최소한 title과 date 정보가 필요합니다. Front Matter가 추가된 파일을 원하는 콘텐츠 섹션 폴더(예: content/posts/)로 복사하거나 이동시킵니다. 예를 들어, my-imported-post.md라는 파일을 가져온다고 가정해 보겠습니다.\n파일을 텍스트 편집기로 열어 아래와 같이 Front Matter를 직접 작성해 줍니다.\n--- title: \u0026#34;외부에서 가져온 나의 포스트\u0026#34; date: 2025-06-20T10:00:00+09:00 draft: false tags: [\u0026#34;hugo\u0026#34;, \u0026#34;markdown\u0026#34;] --- 이 글은 외부 마크다운 편집기에서 작성되었습니다. Front Matter만 정확하게 추가해주면 Hugo 사이트에서 문제 없이 인식됩니다. 이렇게 수정한 파일을 content/posts/ 폴더에 넣기만 하면 Hugo가 다음 빌드 시 자동으로 이 파일을 포함하여 사이트를 생성합니다.\n어떤 방법을 사용해야 할까? # 새로운 글을 작성할 때는 hugo new 사용을 권장합니다. 일관된 구조와 필수 정보(특히 draft: true)를 자동으로 생성해주어 실수를 줄여주고 콘텐츠 관리를 체계적으로 만들어주기 때문입니다.\n기존에 작성된 마크다운 파일을 옮겨오거나 다른 플랫폼에서 콘텐츠를 이전할 때는 파일을 직접 추가하는 방법이 효율적입니다. 이때 Front Matter를 정확히 추가하는 것만 잊지 않으면 됩니다.\n두 가지 방법을 모두 알아두고 상황에 맞게 활용하여 즐겁고 효율적인 Hugo 블로깅 라이프를 즐기시길 바랍니다.\n참조\nHugo 공식 문서: hugo new ","date":"24 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/create-new-post/","section":"Posts","summary":"","title":"HUGO 새 글 작성하기","type":"posts"},{"content":"지난 글에서는 Hugo 설치 방법을 다루었습니다. 이번에는 많은 분이 최종 목표로 삼는, https://\u0026lt;내-GitHub계정\u0026gt;.github.io 주소로 접속되는 나만의 대표 블로그를 구축하는 방법을 상세히 알아보겠습니다.\n이것을 GitHub에서는 사용자 사이트(User Site) 라고 부릅니다. GitHub Pages가 제공하는 가장 기본적이면서도 강력한 기능이죠. 복잡한 과정 없이, 오직 여러분의 GitHub 계정만으로 세상에 단 하나뿐인 블로그 주소를 가질 수 있습니다.\nGitHub 저장소(Repository) 생성하기 # 가장 깔끔하고 권장되는 방법은 소스코드와 실제 웹사이트 결과물을 분리하여 관리하는 것입니다. 이를 위해 GitHub에 두 개의 저장소를 생성합니다.\n소스코드 저장소 (Private 권장) # 역할: 로컬에서 작업하는 Hugo 프로젝트 전체(마크다운 글, 설정 파일, 테마 등)를 관리합니다. 이름: 자유롭게 지정합니다. (예: my-tech-blog) 공개 범위: 소스코드는 굳이 공개할 필요가 없으므로 Private으로 설정하는 것을 권장합니다. 배포용 저장소 (Public 필수) # 역할: Hugo가 빌드하여 생성한 최종 HTML, CSS 파일이 올라가는 공간입니다. 실제 블로그 웹사이트가 됩니다. 이름: 반드시 \u0026lt;GitHub계정명\u0026gt;.github.io 형식이어야 합니다. 이 규칙을 지켜야 GitHub Pages가 정상적으로 동작합니다. 공개 범위: 웹사이트로 외부에 공개되어야 하므로 반드시 Public으로 설정해야 합니다. SSH Deploy Key 설정 # 아래의 명령으로 deploy key를 아래와 같이 생성합니다.\nssh-keygen -t rsa -b 4096 -C \u0026#34;$(git config user.email)\u0026#34; -f gh-pages -N \u0026#34;\u0026#34; gh-pages.pub: public key gh-pages: private key 배포용 저장소의 Settings 로 이동 후, Deploy Keys 항목에 public key를 입력후 Allow write access 항목을 체크합니다.\n소스코드 저장소의 Settings 로 이동 후, Secrets에 private key를 ACTIONS_DEPLOY_KEY로 입력합니다. 로컬 Hugo 프로젝트와 GitHub 연동 # 이제 로컬 my-blog 프로젝트 폴더를 방금 만든 소스코드 저장소(my-blog)와 연결합니다.\n로컬 프로젝트 폴더의 터미널에서 다음 명령어를 실행합니다.\n# 1. Git 저장소로 초기화 (이미 실행했다면 생략) git init # 2. 모든 파일 추가 및 첫 커밋 git add . git commit -m \u0026#34;첫 블로그 설정 및 콘텐츠 초기화\u0026#34; git branch -M main # 3. 원격 저장소(소스코드용) 연결 # \u0026lt;GitHub계정명\u0026gt;과 \u0026lt;저장소이름\u0026gt;을 본인의 정보로 변경하세요. git remote add origin https://github.com/\u0026lt;GitHub계정명\u0026gt;/my-tech-blog.git # 4. main 브랜치로 푸시 git push -u origin main Hugo 설정 파일에 URL 업데이트 # 로컬 Hugo 프로젝트의 설정 파일(hugo.toml 또는 config.toml)을 열어 baseURL을 배포용 저장소 주소로 변경해야 합니다. 이 설정은 링크나 리소스 경로가 올바르게 생성되도록 하는 중요한 역할을 합니다.\nhugo.toml 예시\n# baseURL을 실제 서비스될 블로그 주소로 변경합니다. baseURL = \u0026#34;https://\u0026lt;GitHub계정명\u0026gt;.github.io/\u0026#34; languageCode = \u0026#34;ko-kr\u0026#34; title = \u0026#34;나의 개발 블로그\u0026#34; theme = \u0026#34;적용중인_테마이름\u0026#34; # 예: PaperMod GitHub Actions 워크플로우 설정 # 이 단계가 자동화의 심장부입니다. 로컬 소스코드를 push할 때마다 GitHub 서버가 알아서 Hugo 사이트를 빌드하고, \u0026lt;계정명\u0026gt;.github.io 저장소에 결과물을 배포하도록 설정하겠습니다.\n로컬 프로젝트 루트에 .github/workflows 폴더를 만들고, 그 안에 deploy-hugo.yml 같은 이름의 파일을 생성합니다.\n# 폴더 생성 mkdir -p .github/workflows # yml 파일 생성 (macOS/Linux) touch .github/workflows/deploy-hugo.yml deploy-hugo.yml 파일에 아래 내용을 그대로 복사해 붙여넣습니다.\n.github/workflows/deploy-hugo.yml\nname: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} external_repository: \u0026lt;GitHub계정명\u0026gt;/\u0026lt;GitHub계정명\u0026gt;.github.io publish_branch: master # default: gh-pages publish_dir: ./public external_repository: \u0026lt;GitHub계정명\u0026gt;/\u0026lt;GitHub계정명\u0026gt;.github.io 배포용 저장소 작성한 deploy-hugo.yml 파일을 저장합니다.\n소스코드 Push 및 배포 최종 확인 # 이제 마지막입니다. 로컬에서 변경된 내용(워크플로우 파일 추가 등)을 다시 소스코드 저장소로 push합니다.\ngit add . git commit -m \u0026#34;Add GitHub Actions workflow for auto-deployment\u0026#34; git push push가 완료되면, GitHub의 소스코드 저장소(my-blog)로 이동하여 Actions 탭을 클릭합니다.\nDeploy Hugo site to GitHub Pages 워크플로우가 자동으로 실행되는 것을 볼 수 있습니다. build와 deploy 작업이 순서대로 진행되며, 몇 분 후 모두 녹색 체크 표시로 바뀌면 성공입니다.\n최종 확인:\n이제 웹 브라우저를 열고 https://\u0026lt;GitHub계정명\u0026gt;.github.io 로 접속해 보세요. 로컬에서 hugo server로 보던 것과 동일한 블로그가 온라인에 게시된 것을 확인할 수 있습니다.\nTrouble Shooting # deploy 동작이 정상적을 완료되었지만, 블로그가 정상적으로 표시되지 않을 수 있습니다. 이 경우 배포용 저장소의 배포 위치를 확인해 주세요\nSource: Deploy from a branch Branch: master(main) - /docs 정리하며 # 축하합니다! 이제 여러분은 git push 한 번으로 글을 발행할 수 있는 근사한 자동화 블로그를 소유하게 되었습니다. 여러분의 지식과 경험을 이 새로운 공간에 차곡차곡 쌓아나가시길 바랍니다.\n","date":"23 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/deploy-hugo-on-github-pages-with-actions/","section":"Posts","summary":"","title":"HUGO 블로그, GitHub Actions로 자동 배포하기","type":"posts"},{"content":"","date":"23 June 2025","externalUrl":null,"permalink":"/tags/termux/","section":"Tags","summary":"","title":"Termux","type":"tags"},{"content":"코딩과 글쓰기를 좋아하시는 분들이라면, PC 앞에 앉아야만 작업할 수 있다는 점이 때로는 번거롭게 느껴지셨을 겁니다. 만약 스마트폰만으로 언제 어디서든 블로그 글을 작성하고, 빌드하고, 테스트까지 할 수 있다면 어떨까요?\n이 가이드에서는 여러분의 스마트폰을 강력한 개발 환경으로 만들어주는 Termux와, 빠르고 유연한 정적 사이트 생성기 Hugo를 이용해 나만의 블로그를 만드는 방법을 알아봅니다.\n시작하기 전에: Termux 설치 확인 # 본격적인 시작에 앞서, 가장 핵심적인 준비물인 Termux 앱이 스마트폰에 설치되어 있어야 합니다.\n✅ 아직 Termux를 설치하지 않으셨나요?\n괜찮습니다. Termux의 설치부터 기본 설정까지 자세히 다룬 제 이전 글이 있습니다. 아래 링크의 글을 먼저 따라 설치를 완료하신 후, 다시 이 글로 돌아와 다음 단계를 진행해 주세요.\n[➡️ 참조: Android Termux에서 Hugo 블로그 만들기 ]\nTermux가 준비되셨다면, 이제 Hugo 블로그를 만들 준비가 거의 끝났습니다.\nTermux 환경 준비 및 업데이트 # 가장 먼저, 기존에 설치된 Termux의 패키지를 최신 상태로 만들어 개발 환경을 깔끔하게 준비하겠습니다. 오래된 패키지와의 충돌을 방지하는 중요한 과정입니다.\nTermux를 실행하고 아래 명령어를 입력하세요. 패키지 목록을 갱신하고 설치된 패키지를 최신 버전으로 업그레이드합니다.\npkg update \u0026amp;\u0026amp; pkg upgrade 중간에 Do you want to continue? [Y/n] 와 같은 질문이 나오면 Y를 누르고 엔터를 입력하면 됩니다. 이 과정이 오류 없이 완료되었다면, 다음 단계로 넘어갈 준비가 된 것입니다.\nHugo와 Git 설치하기 # 블로그를 만들기 위해 필요한 핵심 도구들을 설치할 차례입니다.\nHugo: Go 언어로 만들어진 매우 빠른 정적 사이트 생성기(Static Site Generator, SSG)입니다. Git: 버전 관리 시스템입니다. Hugo 테마를 다운로드하거나, 나중에 블로그 코드를 GitHub 등에 백업할 때 필수적입니다. 아래 명령어로 두 패키지를 한 번에 설치합니다.\npkg install hugo git 설치가 잘 되었는지 확인해볼까요? 아래 명령어를 각각 입력하여 버전 정보가 나오면 성공입니다.\nhugo version git version Hugo 블로그 사이트 생성 # 이제 본격적으로 블로그의 뼈대를 만들어 보겠습니다.\n새 사이트 생성 hugo new site 명령어 뒤에 원하는 폴더 이름을 지정합니다. 여기서는 my-blog라는 이름으로 만들겠습니다.\nhugo new site my-blog 생성된 폴더로 이동 cd 명령어를 사용해 방금 만든 my-blog 폴더 안으로 들어갑니다.\ncd my-blog 테마 설치 및 적용 # 디자인 테마를 적용하여 블로그에 옷을 입혀야 합니다. 인기 있는 ananke 테마를 예시로 설치해 보겠습니다.\nGit으로 테마 추가 Git의 submodule 기능을 이용해 테마를 추가합니다.\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 설정 파일에 테마 적용 nano hugo.toml 명령어로 설정 파일을 열고, 아래 내용을 참고하여 수정하거나 추가합니다.\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;ko-kr\u0026#39; title = \u0026#39;나의 첫 Hugo 블로그\u0026#39; theme = \u0026#39;ananke\u0026#39; 수정이 끝났으면 Ctrl + X, Y, Enter 순서로 눌러 저장하고 빠져나옵니다.\n첫 번째 글 작성하기 # hugo new content 명령어로 첫 글의 파일을 생성합니다.\nhugo new content posts/my-first-post.md nano content/posts/my-first-post.md 명령어로 파일을 열고, draft: true를 draft: false로 변경한 후 내용을 작성하세요.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T09:25:37+09:00 draft: false --- ## 안녕하세요! 여기는 제 첫 번째 Hugo 블로그 글입니다. **Termux**와 **Hugo**를 사용해서 만들었죠. - 정말 간편합니다. - 어디서든 작업할 수 있습니다. 로컬 서버 실행 및 확인 # 모든 준비가 끝났습니다. Hugo에 내장된 개발용 웹 서버를 실행하여 결과를 확인해 보겠습니다.\nmy-blog 폴더 안에서 아래 명령어를 실행하세요.\nhugo server 서버가 실행되면 Web Server is available at http://localhost:1313/ 메시지가 나타납니다. 스마트폰의 웹 브라우저를 열고 주소창에 http://localhost:1313을 입력해 보세요.\n여러분이 직접 만든 블로그가 눈앞에 나타날 것입니다.\n다음 단계는? # 축하합니다! 이제 여러분은 스마트폰만으로 Hugo 블로그를 만들고 관리할 수 있는 환경을 완벽하게 갖추었습니다.\n다음 목표는 이 블로그를 GitHub Pages나 Netlify 같은 서비스를 통해 웹에 **배포(Deploy)**하여 전 세계 누구나 접속할 수 있도록 만드는 것입니다. 이 과정은 다음 글에서 자세히 다루도록 하겠습니다.\n이제 여러분의 손안에 강력한 블로깅 도구가 생겼습니다. 언제 어디서든 떠오르는 영감을 놓치지 말고 기록하고, 여러분의 지식과 경험을 세상과 공유해 보세요.\n","date":"22 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-android-termux/","section":"Posts","summary":"","title":"Android Termux에서 HUGO 블로그 만들기","type":"posts"},{"content":"","date":"21 June 2025","externalUrl":null,"permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"Ubuntu","type":"tags"},{"content":" # 오늘은 개발자들 사이에서 빠르고 강력하기로 정평이 난 정적 사이트 생성기(SSG), Hugo를 사용하여 Ubuntu 환경에서 나만의 블로그를 만드는 전체 과정을 안내해 드리겠습니다.\nWordPress와 같은 동적 CMS에 익숙하신 분들께 \u0026lsquo;정적 사이트\u0026rsquo;라는 개념이 낯설 수 있습니다. 간단히 설명하자면, 사용자가 요청할 때마다 데이터베이스를 거쳐 페이지를 만드는 동적 방식과 달리, 정적 사이트는 미리 완성된 HTML 파일을 서버에 올려두고 그대로 보여주는 방식입니다. 이 덕분에 로딩 속도가 매우 빠르고, 데이터베이스가 없어 보안에도 훨씬 유리합니다.\n이 가이드는 Ubuntu 환경과 터미널 사용에 어느 정도 익숙한 분들을 대상으로 합니다. 차근차근 따라오시면, 누구나 자신만의 빠르고 멋진 블로그를 가질 수 있습니다.\nHugo 설치하기 # 가장 먼저 할 일은 Hugo를 우리 Ubuntu 시스템에 설치하는 것입니다. 여러 방법이 있지만, 패키지 관리자인 snap을 이용하는 것이 가장 간단하고 최신 버전을 유지하기 좋습니다.\nsudo snap install hugo 설치가 완료되면, 버전 확인 명령어로 제대로 설치되었는지 확인합니다.\nhugo version 만약 hugo v0.127.0-... 와 같은 버전 정보가 출력된다면 성공적으로 설치된 것입니다.\n새 블로그 프로젝트 생성 # 이제 Hugo를 이용하여 블로그의 기본 뼈대를 만들 차례입니다. 원하는 경로로 이동한 후, 아래 명령어를 실행하여 my-blog라는 이름의 새 사이트를 생성합니다. (물론 my-blog는 원하는 이름으로 변경 가능합니다.)\nhugo new site my-blog 명령이 실행되면 my-blog라는 디렉토리가 생성되고, 그 안에는 다음과 같은 Hugo의 표준 디렉토리 구조가 만들어집니다.\nmy-blog/ ├── archetypes/ ├── content/ ├── data/ ├── layouts/ ├── public/ ├── static/ ├── themes/ └── hugo.toml 각 디렉토리의 역할은 간단히 다음과 같습니다.\ncontent/: 실제 블로그 글(마크다운 파일)이 저장되는 곳입니다. themes/: 블로그의 디자인을 담당하는 테마가 위치합니다. static/: 이미지, CSS, JavaScript 등 정적 파일들을 넣는 곳입니다. hugo.toml: 블로그의 제목, 언어, 테마 등 전반적인 설정을 담당하는 파일입니다. 테마 선택 및 적용 # 뼈대만 있는 블로그에 디자인 테마를 입혀야 합니다. Hugo는 전 세계 개발자들이 만들어 공유하는 수많은 테마를 자랑합니다.\nHugo 공식 테마 사이트 에서 마음에 드는 테마를 골라보세요.\n이 가이드에서는 \u0026lsquo;Ananke\u0026rsquo;라는 인기 있고 깔끔한 테마를 예시로 사용하겠습니다. my-blog 디렉토리 안에서 다음 명령어를 실행하여 테마를 설치합니다.\ncd my-blog git init # 아직 git 저장소가 아니라면 초기화합니다. git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke git submodule을 사용하는 이유는 테마의 원본 저장소와 연결을 유지하여, 나중에 테마가 업데이트되었을 때 쉽게 반영할 수 있기 때문입니다.\n이제 설치한 테마를 블로그에 적용할 차례입니다. hugo.toml 설정 파일을 열고 맨 아래에 다음 한 줄을 추가합니다.\ntheme = \u0026#39;ananke\u0026#39; 첫 번째 글 작성하기 # 블로그의 핵심은 콘텐츠입니다. Hugo는 마크다운(.md) 형식으로 글을 작성합니다. 터미널에서 아래 명령어로 첫 번째 글을 생성해 보겠습니다.\nhugo new content posts/my-first-post.md 이 명령은 content/posts/ 디렉토리 안에 my-first-post.md 파일을 생성합니다. 이제 텍스트 에디터로 이 파일을 열어보겠습니다.\n--- title: \u0026#34;My First Post\u0026#34; date: 2025-06-25T10:25:51+09:00 draft: true --- 여기에 본문 내용을 작성합니다. **안녕하세요, Hugo!** 파일 상단의 ---로 둘러싸인 부분을 Front Matter라고 부릅니다. 글의 제목, 작성일, 공개 여부 등 메타데이터를 정의하는 중요한 영역입니다.\n가장 중요한 점! draft: true는 이 글이 아직 초고 상태임을 의미합니다. 블로그에 정식으로 발행하려면 이 값을 draft: false로 변경하거나 이 줄을 삭제해야 합니다.\n이제 Front Matter 아래에 자유롭게 마크다운 문법으로 글을 작성하면 됩니다.\n로컬 서버에서 확인하기 # 작성한 글이 블로그에서 어떻게 보일지 궁금하실 겁니다. Hugo는 강력한 내장 웹 서버를 제공하여, 내 컴퓨터에서 실시간으로 변경사항을 확인하며 작업할 수 있습니다.\nmy-blog 디렉토리에서 아래 명령어를 실행하세요.\nhugo server -D 여기서 -D 옵션은 draft: true 상태인 초고 글까지 모두 포함해서 보여달라는 의미입니다. 개발 중에는 아주 유용한 옵션입니다.\n터미널에 다음과 같은 메시지가 나타날 것입니다.\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) 이제 웹 브라우저를 열고 주소창에 http://localhost:1313을 입력해 보세요. 방금 설치한 Ananke 테마가 적용되고, 작성한 첫 번째 글이 목록에 나타나는 것을 확인할 수 있습니다.\n마치며 # 지금까지 Ubuntu 환경에서 Hugo를 설치하고, 블로그를 생성하여 첫 글을 작성하고, 서버에 배포할 파일을 만드는 전체 과정을 알아보았습니다.\nHugo는 처음에는 조금 낯설 수 있지만, 일단 익숙해지면 그 속도와 단순함, 그리고 강력한 기능에 매료될 것입니다. 오늘 만든 기본 블로그를 바탕으로 자신만의 테마를 만들거나, 다양한 설정을 변경하며 개성 있는 블로그로 발전시켜 나가시길 바랍니다.\n궁금한 점이 있다면 언제든 댓글로 질문해 주세요. 여러분의 성공적인 블로그 운영을 응원하겠습니다.\n참조:\nHugo 공식 문서: https://gohugo.io/documentation/ Hugo 테마 사이트: https://themes.gohugo.io/ ","date":"21 June 2025","externalUrl":null,"permalink":"/posts/hosting/hugo/make-hugo-blog-on-ubuntu/","section":"Posts","summary":"","title":"Ubuntu에서 HUGO로 나만의 블로그 만들기","type":"posts"},{"content":"","date":"19 June 2025","externalUrl":null,"permalink":"/categories/develop/","section":"Categories","summary":"","title":"Develop","type":"categories"},{"content":"우리가 매일 사용하는 스마트폰은 강력한 AP와 충분한 메모리를 갖춘 훌륭한 개발 및 서버 관리 도구가 될 수 있습니다. 그 중심에는 Termux라는 강력한 터미널 앱이 있습니다. 이번 글에서는 Termux를 \u0026lsquo;올바르게\u0026rsquo; 설치하고 개발에 필요한 기본 환경을 설정하는 방법을 2025년 최신 정보 기준으로 다시 한번 알려드립니다.\nPlay 스토어 vs F-Droid # 많은 분들이 습관적으로 구글 플레이 스토어에서 앱을 검색하고 설치합니다. 하지만 Termux의 경우, 이것이 가장 큰 실수를 유발하는 지점입니다.\n결론부터 말씀드리겠습니다. 2025년 현재, 구글 플레이 스토어에 등록된 Termux는 여전히 업데이트가 중단된 deprecated(사용 중단) 버전입니다.\n사용자분께서 Play 스토어에서 업데이트가 된다고 보셨다면, 이는 Termux의 플러그인(Add-on)이거나, 유사한 이름의 다른 앱일 가능성이 높습니다. 공식 com.termux 앱 패키지는 다음과 같은 이유로 Play 스토어에서 사용해서는 안 됩니다.\n업데이트 중단: 2020년 9월 이후로 메인 앱의 업데이트가 없습니다. 보안 취약점: 5년 가까이 업데이트되지 않은 패키지는 수많은 보안 취약점을 내포하고 있습니다. 저장소(Repository) 문제: 패키지를 다운로드하는 서버 주소가 변경되어 pkg update 같은 핵심 명령어가 정상적으로 동작하지 않습니다. Termux 개발팀은 이러한 문제 때문에 공식적으로 F-Droid 또는 GitHub를 통한 설치를 권장하고 있습니다.\n따라서, Termux의 모든 기능을 안전하고 정상적으로 사용하려면 반드시 F-Droid 또는 GitHub에서 직접 설치해야 합니다. 이 점을 다시 한번 강조합니다.\nTermux 설치하기 # F-Droid는 안드로이드용 자유-오픈 소스 소프트웨어(FOSS)를 제공하는 신뢰할 수 있는 저장소입니다.\nF-Droid 웹사이트 방문 아래 링크를 통해 F-Droid의 Termux 페이지로 이동합니다. https://f-droid.org/packages/com.termux/ APK 파일 다운로드 페이지를 아래로 스크롤하여 \u0026lsquo;Versions\u0026rsquo; 섹션을 찾고, 가장 최신 버전의 \u0026lsquo;Download APK\u0026rsquo; 버튼을 눌러 설치 파일을 다운로드합니다.\n설치 진행 다운로드한 APK 파일을 실행하여 설치합니다. \u0026lsquo;알 수 없는 출처의 앱 설치\u0026rsquo; 권한이 필요할 수 있습니다. 안드로이드 시스템의 안내에 따라 권한을 허용하고 설치를 완료합니다.\nTermux 초기 설정 # 설치를 완료하고 앱을 실행하면, 검은 화면에 커서가 깜빡이는 익숙한 터미널 환경을 마주하게 됩니다. 가장 먼저 패키지들을 최신 상태로 만들어야 합니다.\n아래 명령어를 입력하세요.\npkg update \u0026amp;\u0026amp; pkg upgrade pkg: Termux에서 사용하는 패키지 관리자입니다. Debian 계열 리눅스의 apt와 유사한 역할을 합니다. update: 설치 가능한 패키지 목록을 최신 정보로 갱신합니다. upgrade: 현재 설치된 패키지들을 최신 버전으로 업그레이드합니다. 중간에 몇 가지 질문이 나올 수 있는데, 기본값(Y 또는 N)을 선택하여 엔터를 누르면 무난하게 진행됩니다.\n필수 도구 설치하기 # 이제 개발에 필요한 핵심 도구들을 설치해 보겠습니다.\n저장소 접근 설정 # Termux가 스마트폰의 파일 시스템(다운로드, 사진 폴더 등)에 접근하려면 권한 설정이 필요합니다.\ntermux-setup-storage 위 명령어를 실행하면 저장 공간 접근 권한을 요청하는 팝업이 나타납니다. \u0026lsquo;허용\u0026rsquo; 을 선택하세요.\n이제 홈 디렉터리(~)에 storage라는 이름의 심볼릭 링크(바로가기)가 생성됩니다. 이 폴더를 통해 스마트폰 내부 저장소에 접근할 수 있습니다.\n텍스트 에디터 (nano) # 간단한 스크립트나 설정 파일을 수정하려면 텍스트 에디터가 필요합니다. nano는 사용법이 직관적이라 초심자에게 적합합니다.\npkg install nano SSH 클라이언트 (openssh) # 원격 서버에 접속하여 작업하는 것은 개발자의 기본 업무 중 하나입니다. openssh를 설치하여 SSH 클라이언트를 사용할 수 있습니다.\npkg install openssh 아래 명령을 통해서 ssh key를 생성합니다.\nssh keygen ~/.ssh 폴더 내부에, id_ed25519 , id_ed25519.pub 파일이 정상적으로 생성완료 되면, ssh 접속을 사용할 수 있습니다.\n버전 관리 시스템 (git) # 소스 코드 관리를 위해 Git은 필수입니다.\npkg install git 프로그래밍 언어 (Python) # 다양한 자동화 스크립트 및 개발에 널리 사용되는 Python을 설치해 보겠습니다.\npkg install python 마치며 # 정확한 정보를 바탕으로 올바른 도구를 사용하는 것이 안전하고 효율적인 개발의 첫걸음입니다. F-Droid를 통해 최신 버전의 Termux를 설치하여, 안전하고 강력한 휴대용 개발 환경을 구축하시길 바랍니다.\n이제 여러분의 안드로이드 기기는 언제 어디서든 사용할 수 있는 훌륭한 보조 개발 머신이 되었습니다.\n참조\nTermux 공식 웹사이트: https://termux.dev/en/ Termux F-Droid 페이지: https://f-droid.org/packages/com.termux/ ","date":"19 June 2025","externalUrl":null,"permalink":"/posts/develop/env/termux-setup-on-android/","section":"Posts","summary":"","title":"안드로이드, 리눅스 머신으로 변신시키기: Termux 설치와 기본 설정 가이드 (2025년 최신판)","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]